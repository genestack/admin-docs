{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Open Data Manager Documentation","text":"<p>This documentation contains information how to use ODM system.</p>"},{"location":"user-guide/data-retrieving/","title":"Usage of Python and R SDK","text":"<p>ODM APIs empower you to do large-scale, cross-study, and cross-omics analysis on-the-fly. The ODM OpenAPI Specification can be reviewed at <code>GENESTACK_ENDPOINT_ADDR/swagger/helper/</code>, where <code>GENESTACK_ENDPOINT_ADDR</code> is the URL of the Genestack platform.</p> <p>In addition to that you can also use Python and R SDKs, so you can write your own script, notebook or application.</p>"},{"location":"user-guide/data-retrieving/#python-sdk","title":"Python SDK","text":""},{"location":"user-guide/data-retrieving/#how-to-install","title":"How to install","text":"<p>You can install small libraries for each ODM endpoint.</p> <p>Current libraries list:</p> <ul> <li>study_curator</li> <li>study_user</li> <li>sample_curator</li> <li>sample_user</li> <li>library_curator</li> <li>library_user</li> <li>preparation_curator</li> <li>preparation_user</li> <li>variant_curator</li> <li>variant_user</li> <li>expression_curator</li> <li>expression_user</li> <li>flow-cytometry_curator</li> <li>flow-cytometry_user</li> <li>integration_curator</li> <li>integration_user</li> <li>tasks</li> </ul> <p>Example of library installation:</p> <pre><code># Install the latest version\npython3 -m pip install \\\n      --extra-index-url https://public-nexus.devops.gs.team/repository/pypi-releases/simple \\\n      sample_curator\n\n# OR: Install a specific version starting from 1.53.12, usually the same as ODM version, e.g. 1.54.0\npython3 -m pip install \\\n      --extra-index-url https://public-nexus.devops.gs.team/repository/pypi-releases/simple \\\n      sample_curator==1.53.12\n</code></pre>"},{"location":"user-guide/data-retrieving/#example-of-usage","title":"Example of usage","text":"<p>Script to search through samples and display them in table format:</p> <pre><code>    import os\n    import pandas as pd\n    import sample_curator\n\n    os.environ['PRED_SPOT_HOST'] = 'GENESTACK_ENDPOINT_ADDR'\n    os.environ['PRED_SPOT_TOKEN'] = 'GENESTACK_TOKEN'\n    os.environ['PRED_SPOT_VERSION'] = 'default-released'\n\n    api = sample_curator.SampleSPoTApi()\n    query = '\"Disease\"=\"Healthy\" OR \"Disease\"=\"Alzheimer Disease\"'\n    samples = api.search_samples(filter=query, page_offset=0)\n    print(pd.DataFrame.from_dict(samples.data[:5]))\n</code></pre> <p>The output:</p> <pre><code>  genestack:accession Sample Source ID Sample Name Organism     Sex  Disease   Age Age Unit Tissue Cell Type  ... Family.ID Donor Treatment/Treatment Name Specimen Type Tissue or Cell Type Sample Source Continental Group Code Sample Type Population Code Sample ID Continental Group\n0           GSF136813          HG00096        None     None    Male  Healthy  None     None   None      None  ...   HG00096                    Not treated           LCL               Blood         NHGRI                    EUR         DNA             GBR   HG00096       \"European \"\n1           GSF136814          HG00097        None     None  Female  Healthy  None     None   None      None  ...   HG00097                    Not treated           LCL               Blood         NHGRI                    EUR         DNA             GBR   HG00097       \"European \"\n2           GSF136815          HG00099        None     None  Female  Healthy  None     None   None      None  ...   HG00099                    Not treated           LCL               Blood         NHGRI                    EUR         DNA             GBR   HG00099       \"European \"\n3           GSF136816          HG00100        None     None  Female  Healthy  None     None   None      None  ...   HG00100                    Not treated           LCL               Blood         NHGRI                    EUR         DNA             GBR   HG00100       \"European \"\n4           GSF136817          HG00101        None     None    Male  Healthy  None     None   None      None  ...   HG00101                    Not treated           LCL               Blood         NHGRI                    EUR         DNA             GBR   HG00101       \"European \"\n</code></pre>"},{"location":"user-guide/data-retrieving/#r-sdk","title":"R SDK","text":""},{"location":"user-guide/data-retrieving/#how-to-install_1","title":"How to install","text":"<p>Similar to python, you can install small libraries for each ODM endpoint.</p> <p>Current libraries list: - studyCurator - studyUser - sampleCurator - sampleUser - libraryCurator - libraryUser - preparationCurator - preparationUser - variantCurator - variantUser - expressionCurator - expressionUser - flow-cytometryCurator - flow-cytometryUser - integrationCurator - integrationUser - tasks</p> <p>Example of library installation:</p> <pre><code># Install the latest version\ngenestackRepo &lt;- \"https://public-nexus.devops.gs.team/repository/r-releases\"\ninstall.packages(\"sampleCurator\", repos = genestackRepo)\n\n# OR: Install a specific version starting from 1.53.12, usually the same as ODM version, e.g. 1.54.0\ngenestackRepo &lt;- \"https://public-nexus.devops.gs.team/repository/r-releases\"\noptions(\"repos\" = c(\n  GENESTACK = genestackRepo)\n  )\n\ninstall_specific_version_from_nexus &lt;- function(pkgs, version = NULL, ...) {\n  # Build the package name\n  pkg_name &lt;- paste0(pkgs, \"_\", version, \".tar.gz\")\n  # build the url knowing it should be in root /src/contrib\n  for (repo in getOption(\"repos\")) {\n    url &lt;- paste(repo, \"src/contrib\", pkg_name, sep = \"/\")\n    # try to download\n    try &lt;- tryCatch({\n      path &lt;- file.path(tempdir(), pkg_name)\n      suppressWarnings(download.file(url, path, mode = \"wb\"))},\n      # catch the error\n      error = function(e) 1L\n    )\n  }\n\n  # error result means that specific version is not available\n  if (try == 1L) stop(\"\\nError: \", pkgs, \" not available in version \", version, call. = FALSE)\n  on.exit(unlink(path))\n\n  # if no error, install the package using local path\n  install.packages(path, repos=NULL, ...)\n}\n\nodmVersion &lt;- \"1.53.12\"\ninstall_specific_version_from_nexus(\"sampleCurator\", version = odmVersion)\n</code></pre>"},{"location":"user-guide/data-retrieving/#example-of-usage_1","title":"Example of usage","text":"<p>Script to search through samples and display them in table format:</p> <pre><code>Sys.setenv(PRED_SPOT_HOST = 'GENESTACK_ENDPOINT_ADDR',\n           PRED_SPOT_TOKEN = 'GENESTACK_TOKEN',\n           PRED_SPOT_VERSION = 'default-released')\n\nlibrary(sampleCurator)\nquery &lt;- '\"Disease\"=\"Healthy\" OR \"Disease\"=\"Alzheimer Disease\"'\nsamplesObject &lt;- sampleCurator::SampleSPoTApi_search_samples(filter=query)\nsamplesObject$content$data[1:5]\n</code></pre> <p>The output (shorten):</p> <pre><code>  genestack:accession Sample Source ID Sample Name Organism     Sex\n1           GSF136813          HG00096        None     None    Male\n2           GSF136814          HG00097        None     None  Female\n3           GSF136815          HG00099        None     None  Female\n4           GSF136816          HG00100        None     None  Female\n5           GSF136817          HG00101        None     None    Male\n</code></pre> <p>Note: To successfully run the example you might need to install additional packages such as <code>R6</code> and <code>httr</code>. You can do it with a commands like this:</p> <pre><code>install.packages('R6', repos = \"http://cran.us.r-project.org\")\ninstall.packages('httr', repos = \"http://cran.us.r-project.org\")\n</code></pre>"},{"location":"user-guide/training-materials/","title":"Training materials","text":"<ul> <li>ODM Configuration Guide</li> <li>ODM Basic Training</li> <li>ODM Advanced Training</li> </ul>"},{"location":"user-guide/dictionaries-and-ontologies/creating-new-dictionary/","title":"How to create new simple dictionary","text":"<p>Dictionaries can be loaded to ODM in CSV, JSON, OWL, OBO or TTL formats. In order to create a simple CSV format dictionary create a file in CSV format, add \u201cLabel\u201d to the first line and then add each value one per line. Note labels with commas must be embedded within three double quotes.</p> <p>For example:</p> <pre><code>Label\ng\nkg\n\"\"\"value, continued\"\"\"\n</code></pre> <p>Example of .csv file:</p> <p>body_weight_unit.csv</p> <p>Note</p> <p>Please note that values in dictionary always have String format in ODM, even if they are numbers.</p>"},{"location":"user-guide/dictionaries-and-ontologies/default-dictionaries/","title":"Default dictionaries","text":"<p>Below you can see a table with description of ODM dictionaries:</p> Dictionary Description Is used by Default template NCBI Taxonomy A standard hierarchical nomenclature and classification dictionary for organisms. The original file is available at http://www.berkeleybop.org/ontologies/ncbitaxon.owl https://s3.amazonaws.com/bio-test-data/Ontologies/ncbitaxon.owl Yes ChEBI Ontology The ChEBI ontology focuses on chemical nomenclature and structures, and provides a wide range of other chemical information such as formulae and links to other databases. The original file can be accessed via the web at ftp://ftp.ebi.ac.uk/pub/databases/chebi/ontology/chebi.owl Yes Cellosaurus Controlled Vocabulary A controlled vocabulary which describes all cell lines used in biomedical research. The original file is available at https://raw.githubusercontent.com/calipho-sib/cellosaurus/4895a46f1475ed7ad62f772924d0c1ecb4b5ce6f/cellosaurus.obo Yes Uberon Anatomical Entities An integrated cross-species ontology covering anatomical structures in animals. The original file is available at http://purl.obolibrary.org/obo/uberon/releases/2023-10-27/uberon-simple.owl Yes Cell Type The Cell Ontology is a structured controlled vocabulary for cell types in animals. The original data is available via the link http://purl.obolibrary.org/obo/cl.owl Yes Disease Ontology Extended An ontology for describing the classification of human diseases organized by etiology. The original file is available at http://purl.obolibrary.org/obo/doid.owl Yes Disease Ontology An ontology for describing the classification of human diseases organized by etiology. The original file is available at http://purl.obolibrary.org/obo/doid.owl Therapeutic Area A non-hierarchical controlled vocabulary for Therapeutic Area field Yes Sequencing Platforms A non-hierarchical controlled vocabulary contains list of sequencing platforms Yes Sex A non-hierarchical controlled vocabulary for Sex metainfo field Yes Experiment Instrument This dictionary covers different experiment instruments Yes Data Species This dictionary covers different data species Yes Library Type This dictionary covers different library types Yes Experiment Type This dictionary covers different experiment types Yes Scope This dictionary covers different preparation scopes Yes miRBase microRNA database entities Micro RNA controlled vocabulary (release 22.1).  The original data (mirBase.dat and mirna_species.txt) are available at miRBase Uniprot Homo Sapiens Uniprot proteins dictionary for Homo Sapiens.  The original data are available using query UniProt Gene Ontology A controlled vocabulary describing the gene functions according to three aspects: biological process, molecular function and cellular component. The original file is available at http://purl.obolibrary.org/obo/go.owl Cell Ontology A structured controlled vocabulary for cell types. The original file is available at http://purl.obolibrary.org/obo/cl/releases/2020-03-02/cl-basic.owl Units - Dimensionless Microarray Platforms A non-hierarchical controlled vocabulary contains list of microarray platforms Methods A non-hierarchical controlled vocabulary which covers methods and approaches used in bioinformatics Ethnic Groups A non-hierarchical controlled vocabulary including list of ethnic groups <p>There are several dictionaries generated inside ODM:</p> <ul> <li>Bio counts</li> <li>Dose</li> <li>Energy</li> <li>Length</li> <li>Time</li> </ul> <p>The most recent dictionary versions, used in ODM, are located under s3 bucket and available via http link. Example: https://odm-init.s3.amazonaws.com/dictionaries/cellosaurus.obo</p>"},{"location":"user-guide/dictionaries-and-ontologies/exporting-ontologies-from-odm/","title":"How to get ontologies from ODM","text":"<ol> <li>From the Dashboard go to Template Editor    </li> <li>You will see all the templates    </li> <li>To review ontologies used in a particular template, open the template by clicking on the title.    </li> <li>You will see all the attributes, including which are associated with Dictionaries and you can square the list of Dictionaries used.</li> <li>To get source-file of ontology, you will need accession (e.g. <code>GSF000041</code>)</li> <li>Then you will need to go to the File Manager by a direct link: <code>[your_host]/frontend/endpoint/application/run/genestack/filebrowser</code></li> <li>Put ontology Accession in the search field and click on the search button. You will see templates which use this dictionary and the dictionary itself.      There are templates files in the search results as well as dictionary files, to easily find a dictionary, look at the column \"Kind\" and find \"Dictionary\":    </li> <li>Click on the file title, you will see the context menu, click on \"View metainfo\"    </li> <li>To download the source file click on the link from the Data URL attribute:        Or you can go to the source in the description:    </li> </ol>"},{"location":"user-guide/dictionaries-and-ontologies/loading-new-ontology/","title":"How to load custom dictionaries (ontologies)","text":"<p>This article explains how to load custom dictionaries (ontologies) in ODM.</p> <p>Uploading a dictionary with the same name as a previous dictionary will create a new version (new accession) of the dictionary and the system will mark the old version as obsolete, which will highlight it red in the template editor. Templates will need to be updated to use the new dictionary.</p>"},{"location":"user-guide/dictionaries-and-ontologies/loading-new-ontology/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>Genestack Python client installed. See how to setup Genestack python client</li> <li>Auxiliary scripts installed. See how to install Genestack auxiliary scripts</li> <li>A file describing dictionaries, e.g.: dictionaries.json</li> <li>One or more dictionaries in CSV, JSON, OWL, OBO or TTL formats, hosted at FTP or HTTP web addresses, see dictionary example</li> </ul>"},{"location":"user-guide/dictionaries-and-ontologies/loading-new-ontology/#setting-up-dictionary-namelocation","title":"Setting up dictionary name/location","text":"<p>Open the <code>dictionaries.json</code> file and replace the <code>name</code>, <code>url</code> and <code>description</code> sections with the desired dictionary name as it will appear in ODM, dictionary location, and dictionary description.</p> <pre><code>[\n    {\n        \"name\": \"NCI Thesaurus\",\n        \"url\": \"http://purl.obolibrary.org/obo/ncit.owl\",\n        \"description\": \"NCI Thesaurus (NCIt) is a reference terminology that includes broad coverage of the cancer domain, including cancer related diseases, findings and abnormalities. The NCIt OBO Edition aims to increase integration of the NCIt with OBO Library ontologies\"\n    }\n]\n</code></pre> <p>Multiple dictionaries can be supplied by repeating the section in curly brackets.</p>"},{"location":"user-guide/dictionaries-and-ontologies/loading-new-ontology/#running-the-command-to-import-dictionaries","title":"Running the command to import dictionaries","text":"<p>Run the following command from your terminal:</p> <pre><code>odm-update-dictionary -u YOUR_ALIAS_FOR_USER --file_with_dictionaries /FULL_PATH_TO_THE_DICTIONARIES_JSON_FILE/dictionaries.json\n</code></pre> <p><code>-u</code> [optional] parameter should contain the alias for the user you set up with the Genestack python client previously. <code>-H [hostname]</code> [optional] hostname for the environment being used; you can use either <code>-u</code> or <code>-H</code>. <code>--file_with_dictionaries</code> parameter should contain full path to the <code>dictionaries.json</code> file - replace <code>FULL_PATH_TO_THE_DICTIONARIES_JSON_FILE</code> with this path. or run</p> <pre><code>odm-update-dictionary -u YOUR_ALIAS_FOR_USER --file_with_dictionaries dictionaries.json\n</code></pre> <p>if <code>dictionaries.json</code> is presented in the current working directory.</p> <p>Once loaded the dictionary needs to be indexed. This will occur automatically in the background but can take several minutes (~25 minutes for a 600MB ontology). The indexing task can be monitored in the tasks log.</p>"},{"location":"user-guide/dictionaries-and-ontologies/loading-new-ontology/csv-dictionary-format/","title":"CSV dictionary format","text":"<p>Custom dictionaries can be uploaded to ODM in the form of list files. List files consist of a header line containing label or name,label. Followed by lines of dictionary terms, one per term, in the format <code>&lt;label&gt;</code> or <code>&lt;name&gt;,&lt;label&gt;</code>. If labels contain commas the whole label term need to be enclosed in three double quotes, \u201c\u201c\u201cexample of label, with comma\u201d\u201d\u201d.</p> <p>Example label only dictionary: TherapeuticArea_Vocabulary1.csv</p> <pre><code>label\n\"\"\"Cardiovascular, Renal and Metabolism [CVRM]\"\"\"\nGastrointestinal [GI]\nInfection [INFEC]\nAutoimmune [AI]\nNeuroscience [NEURO]\nOncology [ONC]\nImmuno-oncology [IMMUONC]\nInflammation [INFLA]\nRespiratory [RESP]\nVaccines [VA]\n</code></pre> <p>Example name,label dictionary: TherapeuticArea_Vocabulary2.csv</p> <pre><code>name,label\n[CVRM],\"\"\"Cardiovascular, Renal and Metabolism\"\"\"\n[GI],Gastrointestinal\n[INFEC],Infection\n[AI],Autoimmune\n[NEURO],Neuroscience\n[ONC],Oncology\n[IMMUONC],Immuno-oncology\n[INFLA],Inflammation\n[RESP],Respiratory\n[VA],Vaccines\n</code></pre>"},{"location":"user-guide/packages-to-install/genestack-auxiliary-scripts/","title":"Genestack auxiliary scripts","text":""},{"location":"user-guide/packages-to-install/genestack-auxiliary-scripts/#how-to-set-up-genestack-auxiliary-scripts","title":"How to set up Genestack auxiliary scripts","text":"<p>These scripts provide various auxiliary functions to simplify the work with Omics Data Manager.</p>"},{"location":"user-guide/packages-to-install/genestack-auxiliary-scripts/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> </ul>"},{"location":"user-guide/packages-to-install/genestack-auxiliary-scripts/#instructions","title":"Instructions","text":""},{"location":"user-guide/packages-to-install/genestack-auxiliary-scripts/#start-a-consoleterminal-and-install-genestack-auxiliary-scripts","title":"Start a console/terminal and install Genestack Auxiliary scripts:","text":"<pre><code># Install the latest version\npython3 -m pip install \\\n      --extra-index-url https://public-nexus.devops.gs.team/repository/pypi-releases/simple \\\n      genestack-auxiliary-scripts\n\n# OR: Install a specific version starting from 1.53.12, usually the same as ODM version, e.g. 1.54.0\npython3 -m pip install \\\n      --extra-index-url https://public-nexus.devops.gs.team/repository/pypi-releases/simple \\\n      genestack-auxiliary-scripts==1.53.12\n</code></pre>"},{"location":"user-guide/packages-to-install/genestack-auxiliary-scripts/#to-check-the-existing-version-and-view-all-available-console-commands-type","title":"To check the existing version, and view all available console commands, type:","text":"<pre><code>python3 -m pip show --verbose genestack-auxiliary-scripts\n</code></pre>"},{"location":"user-guide/packages-to-install/genestack-auxiliary-scripts/#you-can-always-remove-the-package-with-a-help-of-this-command","title":"You can always remove the package with a help of this command:","text":"<pre><code>python3 -m pip uninstall genestack-auxiliary-scripts\n</code></pre>"},{"location":"user-guide/packages-to-install/genestack-python-client/","title":"Genestack python client","text":""},{"location":"user-guide/packages-to-install/genestack-python-client/#how-to-set-up-the-genestack-python-client","title":"How to set up the Genestack Python client","text":"<p>This article explains how to set up the Genestack Python client with a user and token, which then can be used by other scripts.</p>"},{"location":"user-guide/packages-to-install/genestack-python-client/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> </ul>"},{"location":"user-guide/packages-to-install/genestack-python-client/#instructions","title":"Instructions","text":""},{"location":"user-guide/packages-to-install/genestack-python-client/#install-the-client-and-bind-a-user","title":"Install the client and bind a user","text":"<ol> <li> <p>Start a console/terminal and install Genestack Python client:</p> <pre><code># Install the latest version\npython3 -m pip install \\\n    --extra-index-url https://public-nexus.devops.gs.team/repository/pypi-releases/simple \\\n    genestack-client\n\n# OR: Install a specific version starting from 1.53.12, usually the same as ODM version, e.g. 1.54.0\npython3 -m pip install \\\n    --extra-index-url https://public-nexus.devops.gs.team/repository/pypi-releases/simple \\\n    genestack-client==1.53.12\n</code></pre> </li> <li> <p>Obtain a token for your Genestack user by logging in to ODM and clicking on the profile link under the username.</p> <p>See an example for Public user below:</p> <p></p> <p>You need to click on the \"Create new token\" button, so you will receive an email with a link to your token. Please open the link in the email and save the token for future needs.</p> </li> <li> <p>Set up your account with the Genestack Python client from a console</p> <pre><code>genestack-user-setup -H https://domain_name/frontend\n</code></pre> </li> <li> <p>Type \u2018add\u2019 to enter a new user, enter an alias for the user.</p> </li> <li>Enter the host name, which should be of the format: https://domain_name/frontend.</li> <li>Then select authentication method by token (1) and input the content of the token you received in step 2:     <pre><code>1) by token\n2) by email and password\nSelect authentication: 1\nHost: https://domain_name/frontend\nPlease specify Genestack API token for \"my_user\":\n</code></pre></li> <li>Type \u2018quit' to exit the user-setup.</li> </ol>"},{"location":"user-guide/packages-to-install/genestack-python-client/#to-check-the-existing-version-and-view-all-available-console-commands-type","title":"To check the existing version, and view all available console commands, type:","text":"<pre><code>python3 -m pip show --verbose genestack-client\n</code></pre>"},{"location":"user-guide/packages-to-install/genestack-python-client/#you-can-always-remove-the-package-with-a-help-of-this-command","title":"You can always remove the package with a help of this command:","text":"<pre><code>python3 -m pip uninstall genestack-client\n</code></pre>"},{"location":"user-guide/templates/create-or-update-template/","title":"How to load custom templates","text":"<p>This article describes how to load templates from a local computer into ODM.</p> <p>Loaded templates are available to all users on the instance.</p>"},{"location":"user-guide/templates/create-or-update-template/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>The user should have the \"Set up templates\" permission and API token. See Getting a Genestack API token</li> <li>Genestack Python client installed. See how to setup Genestack python client</li> <li>Auxiliary scripts installed. See how to install Genestack auxiliary scripts</li> <li>A template settings json file, e.g.: default_ODM_template_settings.json</li> <li>A template json file, e.g.: Default_ODM_Template.json</li> </ul>"},{"location":"user-guide/templates/create-or-update-template/#instructions","title":"Instructions","text":"<ol> <li>Download or create a template json file (see Requirements). Templates are collections of fields with rules determining whether the field is required, which dictionary to use (if any) etc.     <pre><code>[\n    {\n     \"dataType\":\"genestack:sampleObject\",\n     \"name\":\"Organism\",\n     \"metainfoType\":\"com.genestack.api.metainfo.StringValue\",\n     \"dictionaryName\":\"NCBI Taxonomy\",\n     \"isRequired\":true,\n     \"isReadOnly\":false,\n     \"description\": \"Key description, text of 500 characters\"\n    }\n]\n</code></pre></li> <li>Download the template settings json file (see Requirements)</li> <li> <p>Use a text editor to edit the template settings file and change the path to match where you have put your template json file</p> <p><code>\"template_path\": \"/PATHTOTEMPLATEFILE/Default_ODM_Template.json\",</code></p> </li> <li> <p>Run the <code>odm-update-template</code> script:     <pre><code>odm-update-template -H GENESTACK_ENDPOINT_ADDR /PATHTOSETTINGSFILE/default_ODM_template_settings.json\n</code></pre>     Where <code>GENESTACK_ENDPOINT_ADDR</code> is the URL of the Genestack platform.</p> </li> </ol>"},{"location":"user-guide/templates/create-or-update-template/#template_settingsjson","title":"Template_settings.json","text":"<p>This file controls certain parameters of the template file:</p> <pre><code>{\n    \"template_path\": \"Default_ODM_Template.json\", //template path/file name\n    \"template_name\": \"Default Template\", //name of the template\n    \"replace\": true,  //if true, will replace previous template that has the same name\n    \"mark_default\": false //mark this template as the new default template for the organisation\n}\n</code></pre>"},{"location":"user-guide/templates/create-or-update-template/#how-to-create-a-new-template-using-template_schemajson","title":"How to create a new template using template_schema.json","text":"<p>The template json file is validated in ODM against an internal schema: template_schema.json</p> <ol> <li>A single template file contains the properties (keys) for the metadata of study, sample and expression objects together.</li> <li> <p>For each object type (study, samples, libraries and so on) a specific dataType should be used:</p> <p>Study: <code>dataType = \"study\"</code></p> <p>Samples: <code>dataType = \"genestack:sampleObject\"</code></p> <p>Expression (both Transcriptomics and Proteomics): <code>dataType = \"genestack:transcriptomicsParent\"</code></p> </li> <li> <p>The <code>Accession</code> property is mandatory for each type of object. The following values should be set for each dataType section:</p> <pre><code>name = \"genestack:accession\",\nmetainfoType = \"com.genestack.api.metainfo.StringValue\",\nisRequired = true,\nisReadOnly = true\n</code></pre> <p>It is recommended to include properties having <code>isRequired = true</code> into the template file. Please also check out the <code>description</code> property attribute: some properties might be required for certain functionality.</p> </li> <li> <p>The values accepted for each metadata attribute are given by the <code>metainfoType</code> key, and must be one of the following values:</p> <pre><code>\"com.genestack.api.metainfo.IntegerValue\",\n\"com.genestack.api.metainfo.DecimalValue\",\n\"com.genestack.api.metainfo.StringValue\",\n\"com.genestack.api.metainfo.BooleanValue\",\n\"com.genestack.api.metainfo.DateTimeValue\",\n\"com.genestack.api.metainfo.ExternalLink\"\n</code></pre> <ul> <li>for values like FLOAT use <code>\"com.genestack.api.metainfo.DecimalValue\"</code>;</li> <li>for values of type INT use <code>\"com.genestack.api.metainfo.IntegerValue\"</code>;</li> <li>for values of type DATE or TIME use <code>\"com.genestack.api.metainfo.DateTimeValue\"</code>.</li> </ul> <p>Please note that no value bounds can be set up currently.</p> </li> <li> <p>Dictionaries (controlled vocabularies which validate against lists of terms) can be specified for a metadata attribute using the <code>dictionaryName</code> key.    See loading new ontology.</p> </li> <li>For full details refer to the template_schema.json file.</li> <li>The order of the attributes in the template json file is preserved in the template in ODM.</li> </ol>"},{"location":"user-guide/templates/delete-template/","title":"Delete template","text":"<p>This article describes how to delete templates in ODM.</p>"},{"location":"user-guide/templates/delete-template/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>Genestack Python client installed. See how to setup Genestack python client</li> <li>Auxiliary scripts installed. See how to install Genestack auxiliary scripts</li> </ul> <p>Warning</p> <ol> <li>Currently the Default template CAN be deleted, which may cause issues, so please be careful.</li> <li>Only users with the \u201cManage organization\u201d permission can delete templates.</li> <li>The script doesn\u2019t check that the file with the provided accession actually exists so if nothing is deleted but the script runs correctly it will still output 'Success'.</li> <li>The script doesn\u2019t check the type of the file so if a study\u2019s accession is provided instead of a template\u2019s accession the study will be deleted. However, for deletion of studies please use the script from how to delete a study</li> </ol>"},{"location":"user-guide/templates/delete-template/#instructions","title":"Instructions","text":"<ol> <li>Before a template deletion all the studies which have this template set should be manually changed: another template which is not going to be deleted should be applied (for example, Default template). Apply template manually via the UI.</li> <li>Run delete template script and follow its login instructions, replacing the host name with the name of the instance the script will apply to. The script will print \u201cSuccess\u201d or an error stacktrace in case of an error.     <pre><code>odm-delete-template --accession GSF244345 -H GENESTACK_ENDPOINT_ADDR\n</code></pre>     Where <code>GENESTACK_ENDPOINT_ADDR</code> is the URL of the Genestack platform.</li> </ol>"},{"location":"user-guide/users/user-creation/","title":"Users creation","text":""},{"location":"user-guide/users/user-creation/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>Genestack Python client installed and setup with a user account/token.     See how to setup Genestack Python client</li> <li>Auxiliary scripts installed.     See how to install Genestack auxiliary scripts</li> <li>A users.tsv file, for example: users.tsv</li> </ul>"},{"location":"user-guide/users/user-creation/#instructions","title":"Instructions","text":"<ol> <li>Edit users.tsv file in the text editor and replace the example users with your own users - one line per user, detailing email and name, separated by a tab.</li> <li> <p>Run the script below and follow its login instructions, replacing the host name with the address of the instance the script will apply:</p> <p><code>$ odm-create-users -H localhost:8080</code> or use the -u parameter and the user alias created when setting up the Genestack client</p> <p><code>$ odm-create-users -u your_alias</code></p> </li> <li> <p>The script will create new users and print out their passwords, for example:</p> <pre><code>  alice@alphacorp.com    uNgp4F6C    Alice\n  bob@alphacorp.com      xI3AOf2h    Bob\n</code></pre> </li> </ol>"},{"location":"user-guide/working-with-study/curation-script/","title":"Curation script","text":""},{"location":"user-guide/working-with-study/curation-script/#introduction","title":"Introduction","text":"<p>This script allows the curation of metadata by transforming incorrect metadata values to correct ones based on controlled vocabularies (for example, \u201cNCBI Taxonomy\u201d) and manually prepared files with rules for matching. Synonyms, if provided, can assist in the matching process.</p>"},{"location":"user-guide/working-with-study/curation-script/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>The user should be a member of Curator group and have API token. See Getting a Genestack API token</li> <li>Genestack Python client installed. See how to setup Genestack python client</li> <li>Auxiliary scripts installed. See how to install Genestack auxiliary scripts</li> <li>File with curation rules. How to correctly write such file is described below.     Example: rules.json written for sample metadata samples.tsv.</li> </ul>"},{"location":"user-guide/working-with-study/curation-script/#curation-script-usage","title":"Curation script usage","text":"<p>Curation can be carried out by running the Python metadata curation script <code>odm-curate-study</code>. This can be used to perform automated curation of metadata associated with experiments and assays on Genestack. The script takes as input the accessions of Genestack study or studies which should contain the samples to be curated. You must also supply a rules file, which specifies the rules for mapping.</p> <pre><code>odm-curate-study --rules &lt;rules.json&gt; &lt;study accession(s)&gt; -H GENESTACK_ENDPOINT_ADDR\n</code></pre> <p>Where <code>GENESTACK_ENDPOINT_ADDR</code> is the URL of the Genestack platform.</p> <p>Space is used as a separator in case of multiple studies. Example:</p> <pre><code>odm-curate-study --rules rules.json GSF000100 GSF000200 -H GENESTACK_ENDPOINT_ADDR\n</code></pre> <p>You can specify a template for the curation with the --template parameter. If not specified the default template for the organisation is used.</p> <pre><code>odm-curate-study --rules &lt;rules.json&gt; &lt;study accession(s)&gt; --template &lt;template accession&gt; -H GENESTACK_ENDPOINT_ADDR\n</code></pre> <p>If the template specified for the curation differs from the template already associated with the study then the study is not curated and a warning is given in the logs. To explore the full list of supported arguments use the following command:</p> <pre><code>odm-curate-study -h\n</code></pre> <p>You can test a curation rule before applying it with the --dry-run parameter. This will connect to the server and report matches in the task output log (see later) but not actually change any data.</p> <pre><code>odm-curate-study --rules &lt;rules.json&gt; --dry-run &lt;study accession&gt; -H GENESTACK_ENDPOINT_ADDR\n</code></pre> <p>By default, if the target key already contains information it will not be overwritten and a warning will be noted in the logs, however you can force this using the --overwrite flag. This does not affect attributes set as 'read-only' in the template.</p> <pre><code>odm-curate-study --rules &lt;rules.json&gt; --overwrite &lt;study accession&gt; -H GENESTACK_ENDPOINT_ADDR\n</code></pre> <p>Example usage for acting on study GSF123456:</p> <pre><code>odm-curate-study --rules rules.json --template GSF100000 --overwrite GSF123456 -H GENESTACK_ENDPOINT_ADDR\n</code></pre>"},{"location":"user-guide/working-with-study/curation-script/#metadata-mapping-rules","title":"Metadata mapping rules","text":"<p>The curation application uses a <code>rules.json</code> file which defines the mapping rules using the <code>--rules &lt;rule_file&gt;</code> argument. The rules must be provided as a JSON file which contains an array of objects, where each object describes a metadata mapper. The mapping script will search for raw uncurated metadata values in a list of input keys (also called \"raw keys\"), try to map them to a \"curated\" value (using a synonym-aware dictionary or custom rules) and store the curated value in a target key. Values are case-sensitive. The valid attributes for the metainfo mapper are as follows:</p> <ul> <li>dictionary (string, optional) - the name of a public Genestack dictionary used as a source of valid terms - if     specified mappings are not found in a supplied dictionary then a warning is given in the logs;</li> <li>genestack_key (string, mandatory) - target metainfo key (e.g. \u2018Sex\u2019);</li> <li>object_type (string, mandatory) - the specific data object being targeted (e.g. 'study' or 'sample', must be     lowercase.)</li> <li>raw_keys (list of strings, mandatory) - comma separated list of names of the raw (ie from import) metadata     keys in which raw values will be looked up (e.g. \u2018sourceData:ae.sample.Characteristics [Sex]\u2019);</li> <li>rules (object of strings, optional) - rules to map raw values to terms from dictionaries/ontologies; if you     want some value to be ignored (in the case of uninformative or invalid metadata values, for instance) for a specific     metadata field, you can specify null in the argument rules. This field is ignored if a dictionary is supplied.     For example, below is a JSON rules file to define custom mapping rules for the \"Sex\" metainfo attribute. This will     copy     data from a column (<code>sourceData:ae.sample.Characteristics [Sex]</code>) to the correct one (<code>Sex</code>)</li> </ul> <pre><code>[\n    {\n        \"genestack_key\": \"Sex\",\n        \"object_type\": \"sample\",\n        \"raw_keys\": [\"sourceData:ae.sample.Characteristics [Sex]\"]\n    }\n]\n</code></pre> <p>To do the same, but also map data values to specific terms (\"m\" to \"male\", \"f\" to \"female\", \"?\" to \"unknown\"), use the following:</p> <pre><code>[\n    {\n        \"genestack_key\": \"Sex\",\n        \"object_type\": \"sample\",\n        \"raw_keys\": [\"sourceData:ae.sample.Characteristics [Sex]\"],\n        \"rules\": {\n            \"m\": \"male\",\n            \"f\": \"female\",\n            \"?\": \"unknown\"\n        }\n    }\n]\n</code></pre> <p>The end result is as per the below tables.</p> <p>Before:</p> Sex m f ? <p>After:</p> Sex male female unknown <p>Finally, a dictionary can be supplied in the rules. If the original value matches to one of the term's synonyms it will be replaced with the preferred term. The mapping rules will be ignored if a dictionary is supplied for the field.</p> <pre><code>[\n    {\n        \"genestack_key\": \"Sex\",\n        \"object_type\": \"sample\",\n        \"raw_keys\": [\"sourceData:ae.sample.Characteristics [Sex]\"],\n        \"dictionary\": \"Sex\"\n    }\n]\n</code></pre>"},{"location":"user-guide/working-with-study/curation-script/#key_with_unit-mapper","title":"Key_with_unit Mapper","text":"<p>If samples have a key with unit values stored in 1 attribute, e.g. <code>\u201cTime\u201d=\u201d7 days\u201d</code>, it is possible to curate the values so that they are displayed in 2 separate attributes in ODM: <code>\u201cTime/value\u201d=\u201d7\u201d, \u201cTime/unit\u201d=\u201ddays\u201d</code>.</p> <p>To split the value and its associated unit, the script will attempt to use the whitespace character(s) as a delimiter. If there is a space, the script puts the part before the first space in the <code>Value</code> attribute, everything after the first space in the <code>Unit</code> attribute (even if there are more than 1 space). Genestack keys should be specified for both, using a comma separated list. If there are no spaces, everything is put in the <code>Value</code> attribute, the <code>Unit</code> attribute is left empty. We rely on manual curation in this case. Example of using the mapper with units:</p> <pre><code>[\n    {\n        \"object_type\": \"sample\",\n        \"genestack_key\": [\"Treatment/dose/value\", \"Treatment/dose/unit\"],\n        \"raw_keys\": [\"Value[Dose]\"],\n        \"dictionary\": \"Units - Dose/Mass/Volume\"\n    }\n]\n</code></pre> <ul> <li> <p>Sample A:</p> <ul> <li>Before: <code>\"Parameter Value[Dose]\"=7 ug/ml</code></li> <li>After: <code>\"Treatment/dose/value\"=7, \"Treatment/dose/unit\"=microgram per millilitre</code></li> </ul> </li> <li> <p>Sample B:</p> <ul> <li>Before: <code>\"Parameter Value[Dose]\"=7 ug per ml</code></li> <li>After: <code>\"Treatment/dose/value\"=7, \"Treatment/dose/unit\"=ug per ml</code></li> </ul> </li> <li> <p>Sample C:</p> <ul> <li>Before: <code>\"Parameter Value[Dose]\"=7ug/ml</code></li> <li>After: <code>\"Treatment/dose/value\"=7ug/ml, \"Treatment/dose/unit\"=null</code></li> </ul> </li> </ul> <p>Before:</p> Sample Name Dose Sample A 7 ug/ml Sample B 7 ug per ml Sample C 7ug/ml <p>After:</p> Sample Name Dose Dose Unit Sample A 7 ug/ml Sample B 7 ug per ml Sample C 7ug/ml <p>Supported case: We support curation of multiple values with units for a single sample with the <code>\u201ckey_with_unit\u201c</code> mapper, e.g.: Sample X {Attribute_1=A|B; Attribute_2=X|Y} A= Paracetamol; X=5 mg B= Analgin; Y=0.5 g</p> <p>Before:</p> Sample Name Medicine Dose Sample Paracetamol  5mg  Analgin  0.5 g <p>After:</p> Sample Name Medicine Dose Dose Unit Sample Paracetamol  5   mg  Analgin  0.5  g  <p>Unsupported case: Changing a single value to multiple values for this mapper is not supported. Sample X {Attribute_1=A; Attribute_2=X|Y} A= Paracetamol; X=2.5 g | Y=2.5 g Before:</p> Sample Name Medicine Dose Sample Paracetamol  5mg  <p>After:</p> Sample Name Medicine Dose Dose Unit Sample Paracetamol  2.5   g   2.5   g"},{"location":"user-guide/working-with-study/curation-script/#reassigning-attributes","title":"Reassigning attributes","text":"<p>When it comes to matching attribute names, the script works similarly to the \u201cReassign\u201d feature of the Metadata Editor application. That means that if a raw_key from the rules file is detected among the attributes, the values are reassigned to the corresponding genestack_key, and the original attribute raw_key is deleted.</p> <p>Rule:</p> <pre><code>[\n    {\n        \"genestack_key\": \"Disease\",\n        \"object_type\": \"sample\",\n        \"raw_keys\": [\"Illness\", \"DISEASE\"]\n    }\n]\n</code></pre>"},{"location":"user-guide/working-with-study/curation-script/#case-1","title":"Case 1","text":"<p><code>raw_key</code> is a non-template attribute, <code>genestack_key</code> is a template attribute. After curation values are reassigned to <code>genestack_key</code>, and the original attribute <code>raw_key</code> is deleted.</p> <p>Before:</p> Disease Illness Sample 1  A  Sample 2  B  <p>After:</p> Disease Sample 1 A  Sample 2 B <p>The above is valid in most cases, but the behaviour can differ for some specific cases which are described below.</p>"},{"location":"user-guide/working-with-study/curation-script/#case-2","title":"Case 2","text":"<p>If multiple raw keys are defined for the same attribute, the values are taken from the first non empty raw key found for the sample, the rest raw keys are ignored.</p> <p>Multiple <code>raw_key</code>s from the rules are found. All <code>raw_key</code>s are non-template attributes. The first <code>raw_key</code> attribute (<code>Illness</code>) has a value for the <code>Sample 1</code>, but does not have any value for the <code>Sample 2</code>. Hence the value from the second <code>raw_key</code> attribute (<code>DISEASE</code>) is taken for the <code>Sample 2</code>. The <code>raw_key</code> attribute which values were re-assigned for all samples (<code>Illness</code>) is deleted. The partially re-assigned attribute (<code>DISEASE</code>) still presents in the table, but only with values which were not reassigned.</p> <p>Before:</p> Disease Illness DISEASE Sample 1 A A1 Sample 2 B1 <p>After:</p> Disease DISEASE Sample 1 A A1 Sample 2 B1 <p>Note: The described case is quite rare since usually attributes with the same meaning will have the same name across all samples in one study. Multiple raw keys are provided mostly for running the script on multiple studies from different sources where attributes with the same meaning can have different names.</p>"},{"location":"user-guide/working-with-study/curation-script/#case-3","title":"Case 3","text":"<p><code>raw_key</code> is a template attribute. This case is considerably rare too, since the main purpose of the Curation script is to match non-template attributes of non-harmonised metadata to the template attributes. \u201cRe-assign\u201d feature cannot be used for template attributes, since they cannot be deleted. Hence, the values will be copied from raw_key to <code>genestack_key</code> and preserve <code>raw_key</code> in the same state as before the curation.</p> <p>Before:</p> Disease Illness Sample 1 A Sample 2 B <p>After:</p> Disease Illness Sample 1 A A Sample 2 B B"},{"location":"user-guide/working-with-study/curation-script/#read-only-attributes","title":"Read only attributes","text":"<p>Attributes set as read only in the template associated with the study cannot be curated, and a warning is produced in the logs. The <code>overwrite</code> flag does not affect this behaviour.</p>"},{"location":"user-guide/working-with-study/curation-script/#multiple-rules-for-a-single-attribute","title":"Multiple rules for a single attribute","text":"<p>If multiple rules for the same attribute are found, the attribute\u2019s curation is skipped. The warning message is displayed in the logs:</p> <pre><code>We detected multiple, potentially conflicting substitution rules for attribute(s) X, Y that involve changing the\nattribute(s) title and/or values. The attribute(s) is(are) skipped and please check your rules.\n</code></pre>"},{"location":"user-guide/working-with-study/curation-script/#progress-logs","title":"Progress, Logs","text":"<p>You can track the progress of the curation process in the Genestack Task Manager: </p> <p>The results of mapping are shown in the output logs: </p>"},{"location":"user-guide/working-with-study/deleting-study/","title":"How to delete a study","text":""},{"location":"user-guide/working-with-study/deleting-study/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>The user should have the \"Manage organisation\u201d permission and have API token. See Getting a Genestack API token</li> <li>Genestack Python client installed. See how to setup Genestack python client</li> <li>Auxiliary scripts installed. See how to install Genestack auxiliary scripts</li> </ul>"},{"location":"user-guide/working-with-study/deleting-study/#instructions","title":"Instructions","text":"<p>Warning</p> <ol> <li>Only users with the \u201cManage organisation\u201d permission can delete studies.</li> <li>The script doesn\u2019t check that the file with the provided accession actually exists so if nothing is deleted but the script runs correctly it will still output 'Success'.</li> <li>The script doesn\u2019t check the type of the file so if a template\u2019s accession is provided instead of a study\u2019s accession the template will be deleted. However, for deletion of templates please use the script from How to delete a template</li> </ol> <p>Run the script and follow its login instructions, replacing the host name with the name of the instance the script will apply to. The script will print \u201cSuccess\u201d or an error stacktrace if there\u2019s an error.</p> <pre><code>odm-delete-study --accession GSF244344 -H HOSTNAME\n</code></pre>"},{"location":"user-guide/working-with-study/loading-from-geo/","title":"Loading from GEO","text":"<p>This article describes how to prepare a series matrix file from GEO to be loaded to ODM.</p>"},{"location":"user-guide/working-with-study/loading-from-geo/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>Having <code>pandas</code> library installed. We recommend using the latest version available.</li> <li>Genestack Python client installed. See how to setup Genestack python client</li> <li>Auxiliary scripts installed. See how to install Genestack auxiliary scripts</li> <li>Data file from GEO, for example GSE29746_series_matrix.txt</li> </ul>"},{"location":"user-guide/working-with-study/loading-from-geo/#instructions","title":"Instructions","text":"<p>Run the script providing the <code>GSE29746_series_matrix.txt</code> file as an argument</p> <pre><code>odm-geo-prepare GSE29746_series_matrix.txt\n</code></pre> <p>As a result, the script creates the folder with 3 files (example), that you can use to load to ODM. For example:</p> <pre><code>\u251c\u2500\u2500 GSE29746\n\u2502   \u251c\u2500\u2500 GSE29746_expression.gct\n\u2502   \u251c\u2500\u2500 GSE29746_samples.tsv\n\u2502   \u2514\u2500\u2500 GSE29746_study.tsv\n</code></pre> <p>Load your files to AWS S3 and then to ODM following the instructions</p>"},{"location":"user-guide/working-with-study/sharing-study/","title":"How to share a study programmatically","text":""},{"location":"user-guide/working-with-study/sharing-study/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>The user should be a member of Curator group and have API token. See Getting a Genestack API token</li> <li>Genestack Python client installed. See how to setup Genestack python client</li> <li>Auxiliary scripts installed. See how to install Genestack auxiliary scripts</li> </ul>"},{"location":"user-guide/working-with-study/sharing-study/#instructions","title":"Instructions","text":"<p>Please note that there are several limitations:</p> <ol> <li>The script should be launched under the study owner user.</li> <li>The script will fail if the user attempts to share studies with a group name that is used more than once in groups they are a member of (ie, group names should not be duplicated).</li> </ol> <ol> <li>Prepare the data for script: you need accessions of the studies you want to share and the names of the user groups with which you want to share they studies.</li> <li>Run the script and follow its login instructions, replacing the host name with the name of the instance the script will apply to. The script will print \u201cSuccess\u201d or an error stacktrace if there is an error.</li> </ol> <pre><code>odm-share-study --study_accession GSF013340 --group_name GroupName -H HOST\n</code></pre> <p>If a group name contains spaces use quotes around group name:</p> <pre><code>odm-share-study --study_accession GSF000745 --group_name 'Group name with space' -H HOST\n</code></pre>"},{"location":"user-guide/working-with-study/uploading-study/","title":"How to load and share a study, samples and associated data via async loading","text":"<p>This article explains how to load studies via script and share them with the organisation (via GUI). More information about supported files can be found also in the user guide.</p>"},{"location":"user-guide/working-with-study/uploading-study/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>Having <code>pandas</code> library installed. We recommend using the latest version available.</li> <li>Genestack Python client installed. See how to setup Genestack python client</li> <li>Auxiliary scripts installed. See how to install Genestack auxiliary scripts</li> <li>All files with object metadata and data are hosted and available via URLs, e.g. <code>http://data_source/study.csv</code> or file:     <code>///local_data/data_source/study.csv</code> for the case when you need to load data to ODM from a local machine on which ODM     is installed.</li> <li>Requirements for Data Loaded to ODM</li> </ul>"},{"location":"user-guide/working-with-study/uploading-study/#restrictions","title":"Restrictions","text":"<ul> <li>The script does not allow to load of several studies via one run.</li> <li>The script does not provide functionality to load data to ODM from local computer</li> </ul>"},{"location":"user-guide/working-with-study/uploading-study/#instructions","title":"Instructions","text":"<ul> <li>Open a terminal and run a command to display help</li> </ul> <pre><code>odm-import-data -h\n</code></pre> <ul> <li>Run the script with the below parameters:<ul> <li><code>-t, --token</code>: your API token  OR </li> <li><code>-at, --access-token</code>: Your Access (Bearer Token), provided by third party</li> <li><code>-H, --host, -srv, --server</code>: address of the host, e.g. https://odm.genestack.com/</li> <li><code>-s,--study</code>: URL of the study file (or -sa: accession of an existing study)</li> <li><code>-sm,--samples</code>: URL of the samples file or accession of existing samples file to be linked</li> <li><code>-lb, --libraries</code>: URL of the libraries file or accession of existing libraries file to be linked</li> <li><code>-pr, --preparations</code>: URL of hosted preparations file or accession of existing preparations file to be linked</li> <li><code>-e,--expression</code>: URL of any tabular data file (not only expression data) except Gene Variant or Flow Cytometry</li> <li><code>-em,--expression-metadata</code>: URL of any tabular metadata file (not only expression data) except Gene Variant or Flow Cytometry</li> <li><code>-v, --variant</code>: URL of the variants data file</li> <li><code>-vm, --variant-metadata</code>: URL of the variants metadata file</li> <li><code>-f, --flow-cytometry</code>: URL of the flow cytometry data file</li> <li><code>-fm, --flow-cytometry-metadata</code>: URL of the flow cytometry metadata file</li> <li><code>-tmpl, --template</code>: accession of a template to validate against, if not specified \"template marked as default\" is     used;</li> </ul> </li> </ul> <p>Additional optional parameters:</p> <ul> <li> <p>to include a gene-transcript mapping file:</p> <ul> <li><code>-mpf / mapping-file</code> - link to mapping file</li> <li><code>-mpfm / mapping-file-metadata</code> - link to metadata file for the mapping file</li> <li><code>-mpfa / mapping-file-accession</code> - accession of the existing mapping file</li> </ul> </li> <li> <p>rules for uploading mapping files are described in the section below \u201cImporting a cross-reference mapping file\u201c</p> </li> <li>to allow the loading of a duplicate of the study: the data from the links has already been previously loaded into ODM     and for testing purposes, you need to load this data again - <code>--allow-duplicates</code></li> <li>to link all entities of the study according to the data model used: data model with and without libraries and     preparations - <code>-lata, --link-all-to-all</code>. Additional rules are described in the section below \u201cLink all to all\u201c</li> <li>to enable debug mode - <code>--debug</code></li> <li>to allow the script to continue even if linking errors occurred between study     entities - <code>-ile, --ignore-linking-errors</code></li> <li>to recognize first <code>N</code> columns in expression file as feature attributes: <code>-nfa [N]</code>     or <code>--number-of-feature-attributes [N]</code></li> <li>to identify multiple measurement in expression file and use a character <code>:</code> to distinguish the     sample/library/preparation name from the measurement name in column headers: <code>-ms ':'</code>     or <code>--measurement-separator ':'</code></li> <li>to specify the uploaded data as a data class <code>C</code>: <code>-dc 'C'</code> or <code>--data-class 'C'</code><ul> <li>The following options are available: <code>Bulk transcriptomics</code>, <code>Single cell transcriptomics</code>, <code>Differential abundance (FC, pval, etc.)</code>, <code>Pathway analysis</code>, <code>Proteomics</code>, <code>Single cell proteomics</code>, <code>Metabolomics</code>, <code>Epigenomics</code>, <code>DNA methylation</code>, <code>Chemoinformatics</code>, <code>Imaging features</code>, <code>Gene panel data</code>, <code>Biomarker data</code>, <code>Physical measures</code>, <code>Blood counts</code>, <code>Other body fluid counts</code>, <code>Nanopore</code>, <code>Gene variant (VCF)</code>, <code>Flow Cytometry</code>, <code>Other</code></li> </ul> </li> </ul>"},{"location":"user-guide/working-with-study/uploading-study/#data-model","title":"Data model","text":"<p>The script supports 2 data models: </p> <ul> <li>Study - Samples - Omics data:<ul> <li>the script uses this data model if no parameters are specified for libraries or preparations loading;</li> </ul> </li> <li>Study - Samples - Libraries/Preparations - Omics data.<ul> <li>the script uses this data model if parameters for libraries or preparations loading are specified;</li> <li>omics data can be linked only to libraries or preparations;</li> <li>only expression data (the parameters --expression and --expression-metadata) is supported.</li> </ul> </li> </ul> <p>The script works sequentially, linking the object with the previous one according to the data model. Below you can find examples to demonstrate different combinations:</p> <p>Example 1</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n  --study http://data_source/study.csv \\\n  --samples http://data_source/samples_1.csv \\\n  --expression http://data_source/expression_1.gct \\\n  --expression-metadata http://data_source/expression_metadata_1.gct.tsv \\\n  --expression http://data_source/expression_2.gct \\\n  --expression-metadata http://data_source/expression_metadata_2.gct.tsv\n</code></pre> <ul> <li><code>samples_1</code> will be linked to <code>study</code></li> <li><code>expression_1</code> will be linked to <code>samples_1</code></li> <li><code>expression_2</code> will be linked to <code>samples_1</code></li> </ul> <p>Example 2</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n  --study http://data_source/study.csv \\\n  --samples http://data_source/samples_1.csv \\\n  --libraries http://data_source/libraries_1.csv \\\n  --expression http://data_source/expression_1.gct \\\n  --expression-metadata http://data_source/expression_metadata_1.gct.tsv \\\n  --preparations http://data_source/preparations_1.csv \\\n  --expression http://data_source/expression_2.gct \\\n  --expression-metadata http://data_source/expression_metadata_2.gct.tsv\n</code></pre> <ul> <li><code>samples_1</code> will be linked to <code>study</code></li> <li><code>libraries_1</code> will be linked to <code>samples_1</code></li> <li><code>expression_1</code> will be linked to <code>libraries_1</code></li> <li><code>preparations_1</code> will be linked to <code>samples_1</code></li> <li><code>expression_2</code> will be linked to <code>preparations_1</code></li> </ul> <p>Example 3</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n  --study http://data_source/study.csv \\\n  --samples http://data_source/samples_1.csv \\\n  --samples http://data_source/samples_2.csv \\\n  --libraries http://data_source/libraries_1.csv \\\n  --preparations http://data_source/preparations_1.csv \\\n  --expression http://data_source/expression_1.gct \\\n  --expression-metadata http://data_source/expression_metadata_1.gct.tsv\n</code></pre> <ul> <li><code>samples_1</code> will be linked to <code>study</code></li> <li><code>samples_2</code> will be linked to <code>study</code></li> <li><code>libraries_1</code> will be linked to <code>samples_2</code></li> <li><code>preparations_1</code> will be linked to <code>samples_2</code></li> <li><code>expression_1</code> will be linked to <code>preparations_1</code></li> </ul>"},{"location":"user-guide/working-with-study/uploading-study/#link-all-to-all","title":"Link all to all","text":"<p>The <code>-lata</code> parameter allows to bypass the restriction of sequential linking of objects. The behaviour of the script with the specified <code>-lata</code> parameter depends on the used data model:</p> <ol> <li>If there are only samples in the script \u2192 the script tries to link all omics data to all samples;</li> <li>If there are libraries or preparations in the script the linking works by steps:<ul> <li>the script tries to link all libraries and all preparations to all samples;</li> <li>the script tries to link all omics data to all libraries and preparations.</li> </ul> </li> </ol> <p>Example 1 without --link-all-to-all</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n    --study http://data_source/study.csv \\\n    --samples http://data_source/samples_1.csv \\\n    --samples http://data_source/samples_2.csv \\\n    --expression http://data_source/expression_1.gct \\\n    --expression-metadata http://data_source/expression_metadata_1.gct.tsv\n</code></pre> <ul> <li><code>samples_1</code> will be linked to <code>study</code></li> <li><code>samples_2</code> will be linked to <code>study</code></li> <li><code>expression_1</code> will be linked only to <code>samples_2</code></li> </ul> <p>Example 2 with --link-all-to-all</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n    --study http://data_source/study.csv \\\n    --samples http://data_source/samples_1.csv \\\n    --samples http://data_source/samples_2.csv \\\n    --expression http://data_source/expression_1.gct \\\n    --expression-metadata http://data_source/expression_metadata_1.gct.tsv \\\n    --link-all-to-all\n</code></pre> <ul> <li><code>samples_1</code> will be linked to <code>study</code></li> <li><code>samples_2</code> will be linked to <code>study</code></li> <li><code>expression_1</code> will be linked to <code>samples_1</code> and <code>samples_2</code></li> </ul> <p>Example 3 with libraries</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n    --study http://data_source/study.csv \\\n    --samples http://data_source/samples_1.csv \\\n    --samples http://data_source/samples_2.csv \\\n    --libraries http://data_source/libraries_1.csv \\\n    --preparations http://data_source/preparations_1.csv \\\n    --expression http://data_source/expression_1.gct \\\n    --expression-metadata http://data_source/expression_metadata_1.gct.tsv \\\n    --link-all-to-all\n</code></pre> <ul> <li><code>samples_1</code> will be linked to <code>study</code></li> <li><code>samples_2</code> will be linked to <code>study</code></li> <li><code>libraries_1</code> will be linked to <code>samples_1</code> and <code>samples_2</code></li> <li><code>preparations_1</code> will be linked to <code>samples_1</code> and <code>samples_2</code></li> <li><code>expression_1</code> will be linked to <code>preparations_1</code> and <code>libraries_1</code></li> </ul>"},{"location":"user-guide/working-with-study/uploading-study/#study-name","title":"Study name","text":"<p>By default, the Study Title field in the study metadata file will be used to set the name of the study, or if no field is present, it will be set to 'New Study'. You can rename studies via ODM GUI.</p>"},{"location":"user-guide/working-with-study/uploading-study/#importing-a-cross-reference-mapping-file","title":"Importing a cross-reference mapping file","text":"<p>The parameters \u201cmpf\u201d and \u201cmpfm\u201d are used to create a new mapping file with metadata and its linkage with an expression group. The parameter \u201cmpfa\u201d is used for linkage expression groups with an existing mapping file.</p> <p>How to specify the parameters:</p> <ol> <li>You can only specify both \u201cmpf\u201d and \u201cmpfm\u201d at the same time as loading expression data. Otherwise, an error will be    given: \u201cmapping file is supported with expression matrices only\u201d</li> <li>You can only specify \u201cmpfa\u201d at the same time as loading expression data. Otherwise, an error will be given: \u201cmapping    file is supported with expression matrices only\u201d</li> <li>The user can\u2019t specify \u201cmpfm\u201d without \u201cmpf\u201d. Otherwise, an error message is given: \u201cthe parameter \u201cmpf\u201d for mapping    file loading is missing\u201d</li> <li>For the sample group, you can specify either option 1 (one pair of \u201cmpfm\u201d and \u201cmpf\u201d) or option 2 (\u201cmpfa\u201d). Otherwise,    an error message is given: \"only one mapping file is expected. check the value of parameters \u201cmpf\u201d or \u201cmpfa\u201d\".</li> <li> <p>The parameters \u201cmpf\u201d, \u201cmpfm\u201d and \u201cmpfa\u201d must be after the parameters for loading expression data, for example:</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n    --study http://data_source/study.csv \\\n    --samples http://data_source/samples_1.csv \\\n    --expression http://data_source/expression_1.gct \\\n    --expression-metadata http://data_source/expression_metadata_1.gct.tsv \\\n    --expression http://data_source/expression_2.gct \\\n    --expression-metadata http://data_source/expression_metadata_2.gct.tsv \\\n    --mapping-file http://data_source/mapping.txt \\\n    --mapping-file-metadata http://data_source/mapping_metadata.tsv \\\n    --template GSF0000000 \\\n    --allow-duplicates\n</code></pre> </li> <li> <p>If <code>link-all-to-all</code> is specified the script tries to link mapping file to all expression data that was specified.</p> </li> <li>Only one mapping file can be specified along with <code>link-all-to-all</code>.</li> </ol>"},{"location":"user-guide/working-with-study/uploading-study/#versioning","title":"Versioning","text":"<p>The script now enables users to update existing omics data files (e.g. GCT, VCF files). This is done by appending the accession of the existing data file to be updated in square brackets to the data file URL (see below). Previous versions of the data files are kept and are still available, but the active version will be set to the most recently uploaded.</p> <p>Example:</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n    --study-accession GSF994039 \\\n    --samples GSF994040 \\\n    --expression http://exampl.com/expression.gct[GSF994565]  \\\n    --expression-metadata http://exampl.com/expression_metadata.tsv  \\\n    --variant http://exampl.com/variations.vcf[GSF994700] \\\n    --variant-metadata http://exampl.com/variant_metadata.tsv\n</code></pre> <p>As a result of the above, the data files linked to study <code>GSF994039</code> and samples <code>GSF994040</code> will be updated:</p> <ul> <li>Expression file as the next version of <code>GSF994565</code></li> <li>Variant file as the next version of <code>GSF994700</code></li> </ul> <p>Updating data file versions only works for data files linked to existing studies and samples, you cannot create a new study or new samples file at the same time as updating a data file version.</p> <p>Info</p> <p>If you get errors importing data but aren\u2019t sure why you can add the <code>--debug</code> argument to generate more detailed help information - at the end of this is the message from the server, which might tell you something about your input files.</p>"},{"location":"user-guide/working-with-study/uploading-study/#other-examples","title":"Other examples","text":"<p>Here you can find some predefined examples for study importing.</p>"},{"location":"user-guide/working-with-study/uploading-study/#study-with-expressions","title":"Study with expressions","text":"<p>You can use study-samples-omics.zip archive. This archive contains:</p> <ul> <li><code>Test.study.tsv</code> \u2014 study metadata file;</li> <li><code>Test.samples.tsv</code> \u2014 samples metadata file;</li> <li><code>Test.expression.gct.tsv</code> \u2014 expression metadata file;</li> <li><code>Test.expression.gct</code> \u2014 expression data file.</li> </ul> <p>Firstly you need to upload files to data source and get links to these files. And then import a study:</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n  --study http://data_source/Test.study.tsv \\\n  --samples http://data_source/Test.samples.tsv \\\n  --expression-metadata http://data_source/Test.expression.gct.tsv \\\n  --expression http://data_source/Test.expression.gct\n</code></pre>"},{"location":"user-guide/working-with-study/uploading-study/#study-with-libraries-and-preparations","title":"Study with libraries and preparations","text":"<p>You can use study-samples-libraries-omics.zip archive. This archive contains:</p> <ul> <li><code>Test.study.tsv</code> \u2014 study metadata file;</li> <li><code>Test.samples.tsv</code> \u2014 samples metadata file;</li> <li><code>Test.libraries.tsv</code> \u2014 libraries metadata file;</li> <li><code>Test.preparations.tsv</code> \u2014 preparations metadata file;</li> <li><code>Test.expression.gct.tsv</code> \u2014 expression metadata file;</li> <li><code>Test.expression.gct</code> \u2014 expression data file.</li> </ul> <p>Firstly you need to upload files to data source and get links to these files. And then import a study:</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n  --study http://data_source/Test.study.tsv \\\n  --samples http://data_source/Test.samples.tsv \\\n  --libraries http://data_source/Test.libraries.tsv \\\n  --preparations http://data_source/Test.preparations.tsv \\\n  --expression-metadata http://data_source/Test.expression.gct.tsv \\\n  --expression http://data_source/Test.expression.gct\n</code></pre>"},{"location":"user-guide/working-with-study/uploading-study/#study-with-variants","title":"Study with variants","text":"<p>You can use study-variants.zip archive. This archive contains:</p> <ul> <li><code>Example.study.tsv</code> \u2014 study metadata file;</li> <li><code>Example.samples.tsv</code> \u2014 samples metadata file;</li> <li><code>Example.expression.gct.tsv</code> \u2014 expression metadata file;</li> <li><code>Example.expression.gct</code> \u2014 expression data file;</li> <li><code>Example.gx-dummy.tsv</code> \u2014 variants metadata file;</li> <li><code>Example.gx-dummy.vcf</code> \u2014 variants data file.</li> </ul> <p>Firstly you need to upload files to data source and get links to these files. And then import a study:</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n  --study http://data_source/Example.study.tsv \\\n  --samples http://data_source/Example.samples.tsv \\\n  --expression-metadata http://data_source/Example.expression.gct.tsv \\\n  --expression http://data_source/Example.expression.gct\n  --variant-metadata http://data_source/Example.gx-dummy.tsv\n  --variant http://data_source/Example.gx-dummy.vcf\n</code></pre>"},{"location":"user-guide/working-with-study/uploading-study/#argi-study-example","title":"Argi study example","text":"<p>You can use argi-study-example.zip archive. This archive contains:</p> <ul> <li><code>arabidopsis.gct</code> \u2014 expression data file;</li> <li><code>arabidopsis_sample_metadata_uncurated.tsv</code> - samples metadata file;</li> <li><code>arabidopsis_study.tsv</code> \u2014 study metadata file.</li> </ul> <p>Firstly you need to upload files to data source and get links to these files. And then import a study:</p> <pre><code>odm-import-data --token [token] -H [HOST] \\\n  --study http://data_source/arabidopsis_study.tsv \\\n  --samples http://data_source/arabidopsis_sample_metadata_uncurated.tsv \\\n  --expression http://data_source/arabidopsis.gct\n</code></pre>"}]}