{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Open Data Manager Administrator Documentation","text":"<p>This documentation contains information how to deploy and support ODM system.</p>"},{"location":"home/clouds/aws/","title":"Amazon Web Services (AWS)","text":""},{"location":"home/clouds/aws/#required-types-of-resources","title":"Required types of resources","text":"<ul> <li>AWS S3 Bucket</li> <li>AWS IAM user with bucket access above (programmatic access)</li> <li>AWS EKS<ul> <li>AWS EBS</li> <li>AWS ALB</li> <li>AWS ACM</li> <li>AWS Route53</li> </ul> </li> </ul>"},{"location":"home/clouds/aws/#steps-for-creating-aws-resources","title":"Steps for creating AWS resources","text":"<ol> <li> <p>Create S3 Bucket.</p> <ul> <li> <p>You can use the S3 Bucket only from one region, it is recommended to use a common region with EKS.</p> </li> <li> <p>The S3 Bucket can use KMS or default S3 encryption.</p> </li> <li> <p>You need to configure CORS, you can find an example here CORS configuration for S3</p> </li> </ul> </li> <li> <p>Create IAM user, policy (it will be listed below) and attach the policy to the user.</p> <ul> <li> <p>Programmatic access is required to work ODM with IAM user.</p> </li> <li> <p>You can find the recommended IAM policy here IAM policy for S3 access.</p> </li> </ul> </li> <li> <p>Create VPC.</p> <ul> <li> <p>Must have at least 2 private subnets [link].</p> </li> <li> <p>Each subnets must contain at least 100 free IP addresses [recommendation].</p> </li> </ul> </li> <li> <p>Create EKS.</p> <ul> <li>Deploy the addons you need.</li> </ul> </li> <li> <p>Create Route53 hosted zone.</p> <ul> <li> <p>You can use private or public zone.</p> </li> <li> <p>It is recommended to use <code>A</code> type of record and a simple routing method.</p> </li> <li> <p>The recording name should refer to your service (for example ALB).</p> </li> </ul> </li> <li> <p>Create ACM with your FQDN.</p> <ul> <li>You can use wildcard certificate.</li> </ul> </li> <li> <p>Create ALB with ACM above.</p> <ul> <li> <p>If you do not have strict security requirements for ALB, then it is better to use the automatic creation of ALB using the ALB controller (details below in EKS configuration).</p> </li> <li> <p>You can use either internal or public schema depending on your situation (with an internal scheme, SCIM synchronization with Azure AD will not work, only SSO Authorization).</p> </li> <li> <p>ALB Configuration</p> <ul> <li> <p>HTTP/2 - <code>On</code></p> </li> <li> <p>Idle timeout - <code>4000 seconds</code></p> </li> </ul> </li> </ul> </li> </ol>"},{"location":"home/clouds/aws/#recommended-steps-for-eks-configuration","title":"Recommended steps for EKS configuration","text":"<ol> <li> <p>Deploy EBS controller.</p> <ul> <li> <p>Following the documentation, it is required to create an IAM role and deploy the EKS addon.</p> </li> <li> <p>It is recommended to use GP3 storages (to do this, you need to deploy a specific StorageClass, example), but if required, you can use the default GP2 as well.</p> </li> </ul> </li> <li> <p>Deploy ALB controller.</p> <ul> <li> <p>Following the documentation, it is required to create an IAM role and deploy the ALB Controller.</p> </li> <li> <p>If you need to use already created ALB, please review this documentation and follow the steps below.</p> <ol> <li> <p>Create a target group manually and specify any IP address from the EKS subnet, it will be automatically replaced with the actual address by the ALB controller.</p> <ul> <li> <p>Target type is <code>IP addresses</code>.</p> </li> <li> <p>Target group name is any name. For example: <code>Genestack-ODM</code>.</p> </li> <li> <p><code>Protocol : Port</code> is <code>HTTP : 80</code></p> </li> <li> <p>IP address type is <code>IPv4</code></p> </li> <li> <p>VPC is <code>YOUR_EKS_VPC</code></p> </li> <li> <p>Protocol version is <code>HTTP1</code></p> </li> <li> <p>Health check protocol is <code>HTTP</code></p> </li> <li> <p>Health check path is <code>/frontend/health</code></p> </li> </ul> </li> <li> <p>Create a listener in ALB and attach the target group.</p> <ul> <li> <p>HTTP Path Pattern is <code>/*</code>.</p> </li> <li> <p>HTTP Host Header is <code>ODM_FQDN</code>. <code>ODM_FQDN</code> - ODM url without <code>https://</code> or <code>http://</code>. For example: <code>odm.genestack.com</code>.</p> </li> </ul> </li> <li> <p>Forward to target group above</p> </li> <li> <p>Set <code>nginx.ingress.enabled</code> parameter to <code>false</code> in ODM helm chart.</p> </li> <li> <p>Create and deploy TargetGroupBinding (example) in Kubernetes.</p> </li> <li> <p>Ensure that health checks in the target group have passed (after ODM deployment). You may need to allow access for the ALB subnet in the EC2 Security Group.</p> </li> </ol> </li> <li> <p>If you don't have an ALB.</p> <ul> <li>It will be created automatically during ODM deployment by ALB Controller.</li> </ul> </li> </ul> </li> <li> <p>[Optional] Deploy External DNS.</p> <ul> <li> <p>To automatically create records in Route53, it is recommended to use External DNS.</p> </li> <li> <p>Be careful when using it, you should limit the list of zones with which it can work. And if the zone is used for something else, then make sure that it will not delete records from there.</p> </li> </ul> </li> </ol>"},{"location":"home/clouds/aws/#configuration-examples","title":"Configuration examples","text":"CORS configuration for S3 <pre><code>[\n    {\n        \"AllowedHeaders\": [\n            \"accept\",\n            \"accept-language\",\n            \"Content-Type\"\n        ],\n        \"AllowedMethods\": [\n            \"PUT\"\n        ],\n        \"AllowedOrigins\": [\n            \"https://ODM_FQDN\"\n        ],\n        \"ExposeHeaders\": [],\n        \"MaxAgeSeconds\": 3000\n    }\n]\n</code></pre> IAM policy for S3 access <pre><code>{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"ListObjectsInBucket\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\"\n      ],\n      \"Resource\" : [\"S3_BUCKET_ARN\"]\n    },\n    {\n      \"Sid\" : \"AllObjectActions\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:*Object*\",\n        \"s3:AbortMultipartUpload\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Resource\" : [\"S3_BUCKET_ARN/*\"]\n    },\n    {\n      \"Sid\" : \"AllowUseOfTheKey\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"kms:Encrypt\",\n        \"kms:Decrypt\",\n        \"kms:ReEncrypt*\",\n        \"kms:GenerateDataKey*\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\" : [\"KMS_KEY_ARN\"]\n    }\n  ]\n}\n</code></pre> GP3 StorageClass example <pre><code>apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: gp3\nparameters:\n  type: gp3\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: Immediate\nallowVolumeExpansion: true\n</code></pre> TargetGroupBinding example <pre><code>apiVersion: elbv2.k8s.aws/v1beta1\nkind: TargetGroupBinding\nmetadata:\n  name: odm\n  namespace: odm\nspec:\n  ipAddressType: ipv4\n  serviceRef:\n    name: odm-nginx\n    port: 80\n  targetGroupARN: TARGET_GROUP_ARN\n</code></pre>"},{"location":"home/clouds/azure/","title":"Microsoft Azure","text":""},{"location":"home/clouds/azure/#required-types-of-resources","title":"Required types of resources","text":"<ul> <li>Azure FIles</li> <li>AKS<ul> <li>Azure Disk</li> <li>Azure App Gateway</li> <li>Azure DNS</li> </ul> </li> </ul> <p>Limitation</p> <p>At the moment this setup can only work with a Azure Files mount in a pods.</p>"},{"location":"home/clouds/azure/#recommended-steps-for-aks-configuration","title":"Recommended steps for AKS configuration","text":"<ol> <li> <p>Deploy AzureFile CSI Driver.</p> <ol> <li>Create Secret, PV and PVC.</li> </ol> </li> </ol>"},{"location":"home/clouds/azure/#configuration-examples","title":"Configuration examples","text":"Secret example. <pre><code>apiVersion: v1\ndata:\n  azurestorageaccountkey: xxxx\n  azurestorageaccountname: xxxx\nkind: Secret\nmetadata:\n  name: azure-secret\n  namespace: odm\ntype: Opaque\n</code></pre> PersistentVolume example. <pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: pv-azurefile\nspec:\n  capacity:\n    storage: 100Gi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: azurefile-csi\n  mountOptions:\n    - dir_mode=0777\n    - file_mode=0777\n    - uid=0\n    - gid=0\n    - mfsymlinks\n    - cache=strict\n    - nosharesock\n  csi:\n    driver: file.csi.azure.com\n    readOnly: false\n    volumeHandle: 1111-xxxx-23\n    volumeAttributes:\n      resourceGroup: xxxxx\n      shareName: xxxxx\n    nodeStageSecretRef:\n      name: azure-secret\n      namespace: odm\n</code></pre> PersistentVolumeClaim example. <pre><code>kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: pvc-azurefile\n  namespace: odm\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 100Gi\n  volumeName: pv-azurefile\n  storageClassName: azurefile-csi\n</code></pre>"},{"location":"home/helm/how-to-deploy/","title":"How to deploy","text":""},{"location":"home/helm/how-to-deploy/#requirements","title":"Requirements","text":"<ul> <li> <p>Kubernetes</p> </li> <li> <p>Helm 3+</p> </li> <li> <p>AWS CLI for getting permissions to download Helm chart</p> </li> </ul>"},{"location":"home/helm/how-to-deploy/#deployment-information","title":"Deployment Information","text":"<ul> <li> <p>All main ODM settings are presented in the Deployment Helm Chart.</p> </li> <li> <p>To deploy ODM <code>StorageClass</code> and <code>IngressClass</code> have to be configured in Kubernetes Cluster.</p> </li> <li> <p>To enable automatic metrics collection when using Prometheus Operator, configure the <code>serviceMonitor</code> parameter in the Helm Chart.</p> </li> <li> <p>We provide a tool that automates the process of updating credentials for ECR, where our container images are hosted. This tool ensures seamless access to ECR by handling credential rotation.</p> <ul> <li> <p>It's important to note that the ECR password is valid for a duration of 12 hours.</p> </li> <li> <p>If you are using AWS EKS, you do not need this tool. Access to our ECR will be provided upon request.</p> </li> </ul> </li> <li> <p>To utilize external storage solutions that are compatible with Distributed File System (DFS) within a Kubernetes environment, it is necessary to first establish a Persistent Volume Claim (PVC).</p> </li> </ul>"},{"location":"home/helm/how-to-deploy/#deployment-process","title":"Deployment process","text":"<ol> <li> <p>Preparing to log in to ECR.</p> <ul> <li> <p>If you are not hosting on AWS, Configure AWS CLI (see Long-term credentials) with the credentials provided by our support team (this is necessary to access the ECR).</p> </li> <li> <p>If you are hosting on AWS, ensure that you have the AmazonEC2ContainerRegistryReadOnly policy or a similar one enabled for access to ECR.</p> </li> </ul> </li> <li> <p>Login to ECR</p> <pre><code>aws ecr get-login-password --region us-east-1 | helm registry login --username AWS \\\n--password-stdin 091468197733.dkr.ecr.us-east-1.amazonaws.com\n</code></pre> </li> <li> <p>Deploy ODM-OPS</p> <p>a) Download helm-chart:</p> <pre><code>helm pull oci://091468197733.dkr.ecr.us-east-1.amazonaws.com/genestack/chart/odm-ops\n</code></pre> <p>b) Untar the archive:</p> <pre><code>tar xvf odm-ops-*.tgz\n</code></pre> <p>c) Run ODM-OPS deployment, excluding <code>crds</code> directory:</p> <pre><code>helm upgrade -i odm-ops --create-namespace --skip-crds -n odm-ops odm-ops\n</code></pre> </li> <li> <p>Deploy ODM</p> <p>a) Download helm-chart:</p> <pre><code>helm pull oci://091468197733.dkr.ecr.us-east-1.amazonaws.com/genestack/chart/odm\n</code></pre> <p>b) Untar the archive:</p> <pre><code>tar xvf odm-*.tgz\n</code></pre> <p>c) Take a look to a default <code>values.yaml</code> and to a <code>odm/examples</code> directory, the most general file in there is <code>recomendations.yaml</code>. Please, make changes according to your infrastructure and requirements in separate file, e.g. <code>custom-values.yaml</code>.</p> <pre><code>cat odm/examples/*.yaml\n</code></pre> <p>d) Run ODM deployment:</p> <pre><code>helm upgrade -i odm --create-namespace -n odm -f custom-values.yaml odm\n</code></pre> </li> </ol>"},{"location":"home/release-notes/v1.50-v1.59/","title":"Release notes","text":""},{"location":"home/release-notes/v1.50-v1.59/#version-158","title":"Version 1.58","text":"<p>Warning</p> <p>This version must be installed before proceeding with the next update.</p> <p>Helm chart version 1.58.2</p>"},{"location":"home/release-notes/v1.50-v1.59/#clickhouse-migration","title":"Clickhouse migration","text":"<p>In current release we moved from standalone Clickhouse container to the Clickhouse cluster that will be controlled by Altinity clickhouse operator. We automated process of transferring data from the standalone version to the cluster version of clickhouse, migration will be executed during upgrade process.</p> <p>Things that you have keep in mind before upgrading process:</p> <ul> <li> <p>Migration time depends on resources(mostly on CPU and Disk IO) allocated for Clickhouse instances, during our tests we've mentioned average speed 50Gb per hour for instances with 4CPU/16Gb RAM</p> </li> <li> <p>It's necessary not to set flags as <code>--wait</code> and <code>--timeout</code> during upgrading process because of migration time</p> </li> <li> <p>The new ClickHouse cluster must have 25% more disk space than the standalone variant.</p> </li> <li> <p>Optional: We've developed a tool that checks consistency of data, you could use it before and after the upgrading process and compare results of those checks just to be sure that everything went as expected</p> </li> </ul>"},{"location":"home/release-notes/v1.50-v1.59/#following-steps","title":"Following steps","text":"<ol> <li> <p>(Upgrade flow) Proceed with the odm installation, take itnto account:</p> <p>a. <code>odm-ops</code> chart will install the Altinity ClickHouse operator with pre-configured settings.</p> <p>b. In your custom values for <code>odm</code> chart adjust parameters for ClickHouse and Altinity ClickHouse (requests, limits, disk size +25%, etc.). We suggest to temporary increase resources for both of Clickhouses since it will reduce timing for migration.</p> <p>c. VERY IMPORTANT! Make sure that old clickhouse is NOT disabled! Path in values is <code>clickhouse.enabled</code>. By default, it's enabled.</p> <p>d. DO NOT apply <code>recommendations.yaml</code> file from example as is, it's recommendation ONLY for new installations!</p> <p>e. Resources path in values for old clickhouse is <code>clickhouse.resources</code> for the new one <code>altinity.clickhouse.installation.spec.templates.podTemplate.spec.mainContainer.resources</code></p> <p>f. Persistance size path for old clickhouse is <code>clickhouse.persistence.size</code> for the new one <code>altinity.clickhouse.installation.spec.templates.volumeClaimTemplate.spec.resources.requests.storage</code></p> </li> <li> <p>A job named <code>odm-clickhouse-helper</code> will appear in Kubernetes, and it will handle the migration.</p> <p>a. During the ClickHouse migration, ODM will continue to operate, but all writes to ClickHouse will be queued.  </p> <p>b. Wait until the <code>odm-clickhouse-helper</code> job completes, indicating that the migration is done.</p> </li> <li> <p>Disable <code>clickhouse</code> and <code>clickhouseHelper</code> in Helm values. You can refer to the example <code>disable-old-clickhouse-after-upgrade.yaml</code>.</p> </li> <li> <p>Update ODM one last time with <code>helm upgrade ...</code>. This will disable the old ClickHouse.</p> </li> </ol>"},{"location":"home/release-notes/v1.50-v1.59/#helm-examples-changes","title":"Helm examples changes","text":"<ul> <li> <p>New examples for different ODM configuration options have been added to the <code>examples</code> helm chart directory, and all old ones have been updated.</p> </li> <li> <p>Additionally, recommendations for computing resources have been included.</p> </li> </ul>"},{"location":"home/release-notes/v1.50-v1.59/#helm-configuration-changes","title":"Helm configuration changes","text":"<ul> <li> <p>From this release, we are using fully original Docker images for the OSS components of ODM. It is not recommended to update them independently.</p> <p>From:</p> <pre><code>mysql:\n  image:\n    registry: 091468197733.dkr.ecr.us-east-1.amazonaws.com\n    repository: genestack/mysql\n\nmailcatcher:\n  image:\n    registry: 091468197733.dkr.ecr.us-east-1.amazonaws.com\n    repository: genestack/mailcatcher\n\nclickhouse:\n  image:\n    registry: 091468197733.dkr.ecr.us-east-1.amazonaws.com\n    repository: genestack/clickhouse\n\nnginx:\n  image:\n    registry: 091468197733.dkr.ecr.us-east-1.amazonaws.com\n    repository: genestack/nginx\n</code></pre> <p>To:</p> <pre><code>mysql:\n  image:\n    registry: docker.io\n    repository: mysql\n\nmailcatcher:\n  image:\n    registry: docker.io\n    repository: dockage/mailcatcher\n\nclickhouse:\n  image:\n    registry: docker.io\n    repository: clickhouse/clickhouse-server\n\nnginx:\n  image:\n    registry: docker.io\n    repository: nginxinc/nginx-unprivileged\n</code></pre> </li> <li> <p>Now you can mount any file with any content into any container in ODM! For example, your certificates. This feature required adding the full path in all existing ODM configuration files.</p> <p>From:</p> <pre><code>core:\n  configurationFiles:\n    \"application.yaml\":\n\napplications:\n  configurationFiles:\n    \"application.yaml\":\n    \"microsoft.openid.ini\":\n    \"okta.openid.ini\":\n    \"google.openid.ini\":\n\nmysql:\n  configurationFiles:\n    \"genestack.cnf\":\n\nfuncFile:\n  configurationFiles:\n    \"application.yaml\":\n\nfuncJob:\n  configurationFiles:\n    \"application.yaml\":\n\nlinkService:\n  configurationFiles:\n    \"application.yaml\":\n\nclickhouse:\n  configurationFiles:\n    \"config.yaml\":\n    \"users.yaml\":\n\nnginx:\n  configurationFiles:\n    \"odm.conf\":\n    \"proxy-pass-parameters.conf\":\n</code></pre> <p>To:</p> <pre><code>core:\n  files:\n    \"/var/lib/genestack/properties/application.yaml\":\n\napplications:\n  files:\n    \"/var/lib/genestack/properties/application.yaml\":\n    \"/var/lib/genestack/properties/microsoft.openid.ini\":\n    \"/var/lib/genestack/properties/okta.openid.ini\":\n    \"/var/lib/genestack/properties/google.openid.ini\":\n\nmysql:\n  files:\n    \"/etc/mysql/conf.d/genestack.cnf\":\n\nfuncFile:\n  files:\n    \"/app/config/application.yaml\":\n\nfuncJob:\n  files:\n    \"/app/config/application.yaml\":\n\nlinkService:\n  files:\n    \"/app/config/application.yaml\":\n\nclickhouse:\n  files:\n    \"/etc/clickhouse-server/config.d/config.yaml\":\n    \"/etc/clickhouse-server/users.d/users.yaml\":\n\nnginx:\n  files:\n    \"/etc/nginx/conf.d/odm.conf\":\n    \"/etc/nginx/conf.d/proxy-pass-parameters.conf\":\n</code></pre> </li> <li> <p>The AWS credentials for connecting to S3 in <code>core</code> and <code>applications</code> have been removed. If you have these parameters, you can safely delete them.</p> <pre><code>core:\n  files:\n    \"/var/lib/genestack/properties/application.yaml\":\n      backend:\n        aws:\n          region: \"\"\n          endpoint:\n            url: \"\"\n          access:\n            key: \"\"\n          secret:\n            key: \"\"\n</code></pre> <p>Danger</p> <p>Important! The AWS region in the <code>application</code> must remain! You can delete only the <code>endpoint</code>, <code>access</code> and <code>secret</code> parameters.</p> <pre><code>applications:\n  files:\n    \"/var/lib/genestack/properties/application.yaml\":\n      frontend:\n        aws:\n          region: \"{{ .Values.credentials.awsS3Region }}\"\n          endpoint:\n            url: \"\"\n          access:\n            key: \"\"\n          secret:\n            key: \"\"\n</code></pre> </li> <li> <p>Configuration file <code>settings.py.local</code> has been removed. If you are using it, you can safely delete it.</p> <pre><code>core:\n  files:\n    \"settings.py.local\":\n</code></pre> </li> <li> <p>The previously added <code>BusyBox</code> image for <code>ClickHouse</code> has been removed. If you are using it, you can safely delete it.</p> <pre><code>clickhouse:\n  busyboxImage:\n    registry: docker.io\n    repository: busybox\n    tag: 1.36.1\n</code></pre> </li> </ul>"},{"location":"home/release-notes/v1.50-v1.59/#version-157","title":"Version 1.57","text":"<p>Warning</p> <p>This version must be installed before proceeding with the next update.</p> <p>Helm chart version 1.57.0</p>"},{"location":"home/release-notes/v1.50-v1.59/#helm-configuration-changes_1","title":"Helm configuration changes","text":"<ul> <li> <p>Removed the link to the database for the service <code>func-file</code>. If you have it in your <code>values.yaml</code>, then you can safely remove the <code>spring</code> map completely.</p> <pre><code>funcFile:\n  configurationFiles:\n    \"application.yaml\":\n      spring:\n        datasource:\n          # -- Mysql jdbc URL\n          url: \"jdbc:mysql://...\"\n</code></pre> </li> <li> <p>For the Clickhouse <code>busybox</code> image, the ability to set the repository and version has been added.</p> <pre><code>clickhouse:\n  busyboxImage:\n    # -- Image registry\n    registry: docker.io\n    # -- Image repository\n    repository: busybox\n    # -- Image tag\n    tag: 1.36.1\n</code></pre> </li> </ul>"},{"location":"home/release-notes/v1.50-v1.59/#version-156","title":"Version 1.56","text":"<p>Helm chart version 1.56.1</p>"},{"location":"home/release-notes/v1.50-v1.59/#export-metrics-to-genestack","title":"Export metrics to Genestack","text":"<p>Fluent-bit was introduced as an extra service tasked with collecting and dispatching metrics in Prometheus format to a Genestack.</p> <p>These metrics encompass technical and/or product-related data, devoid of any sensitive information.</p> <p>If you wish to deactivate this functionality, you can do so by configuring the following parameter:</p> <pre><code>fluent-bit:\n  enabled: false\n</code></pre>"},{"location":"home/release-notes/v1.50-v1.59/#helm-configuration-changes_2","title":"Helm configuration changes","text":"<p>Now organization name and hostname are in a <code>global</code> section:</p> <p>From:</p> <pre><code>odmFrontendHostname: odm.local\napplications:\n  configurationFiles:\n    \"application.yaml\":\n      frontend:\n        ui:\n          organization:\n            name: \"Genestack\"\n</code></pre> <p>To:</p> <pre><code>global:\n  hostname: odm.local\n  organizationName: \"Genestack\"\n</code></pre>"},{"location":"home/release-notes/v1.50-v1.59/#version-155","title":"Version 1.55","text":"<p>Helm chart version 1.55.4</p>"},{"location":"home/release-notes/v1.50-v1.59/#configure-odm-usage-together-with-encrypted-s3-bucket-sse-kms-and-sse-s3-only","title":"Configure ODM usage together with encrypted S3 bucket (SSE-KMS and SSE-S3 only)","text":""},{"location":"home/release-notes/v1.50-v1.59/#introduction","title":"Introduction","text":"<p>You can find configuration examples in the ODM Helm chart.</p> <p>In case you have several AWS credentials in your configuration, you need to modify only the credentials for accessing the bucket in specified as <code>frontend.aws.bucket</code>.</p>"},{"location":"home/release-notes/v1.50-v1.59/#sse-kms","title":"SSE-KMS","text":"<p>To enable uploading into an SSE-KMS encrypted bucket, you need to customize <code>func-file</code> configuration. The following configuration example uses a bucket encrypted by SSE-KMS with the name <code>&lt;BUCKET_NAME&gt;</code>. The bucket configuration should specify the algorithm <code>aws:kms</code> as <code>preferredAlgorithm</code>. Additionally, the property <code>kmsCmkId</code> should be added with a value equal to key id <code>arn:aws:kms:...</code> if the bucket policy requires this key to be explicitly send on PUT request. The <code>func-file</code> section in the configuration should look like this:</p>"},{"location":"home/release-notes/v1.50-v1.59/#sse-s3","title":"SSE-S3","text":"<p>The SSE-S3 encryption type is default to the most buckets. To force ODM request this type of encryption from S3 provider for <code>&lt;BUCKET_NAME&gt;</code>, you need to specify the <code>preferredAlgorithm</code> property with the value <code>AES256</code>:</p>"},{"location":"home/release-notes/v1.50-v1.59/#on-storage_config-section-configuration-in-func-file","title":"On <code>storage_config</code> section configuration in <code>func-file</code>","text":"<p>Keep in mind that <code>func-file</code> reads the <code>storage_config</code> section sequentially. You can create specific configurations for individual buckets, e.g., if one has SSE-KMS encryption while others do not. To do this, as the first item in the list, you'll need to specify the bucket with the specific configuration and its name. Then, provide the general configuration for the other buckets using the wildcard symbol <code>*</code>. ODM will only upload files to the bucket, specified as <code>frontend.aws.bucket</code> property, regardless to <code>storage_config</code> section.</p>"},{"location":"home/release-notes/v1.50-v1.59/#genestack-pod-separation","title":"Genestack pod separation","text":"<p>Example on the image section, but it's applicable for sections with backend/frontend separation.</p> <p>ApplicationSettings changes showed separately:</p> <p>From:</p> <pre><code>genestack:\n  image:\n    backend:\n      registry: 091468197733.dkr.ecr.us-east-1.amazonaws.com\n      repository: genestack/core\n      pullPolicy: Always\n      pullSecrets: []\n    frontend:\n      registry: 091468197733.dkr.ecr.us-east-1.amazonaws.com\n      repository: genestack/applications\n      pullPolicy: Always\n      pullSecrets: []\n</code></pre> <p>To:</p> <pre><code>core:\n  image:\n    registry: 091468197733.dkr.ecr.us-east-1.amazonaws.com\n    repository: genestack/core\n    pullPolicy: Always\n    pullSecrets: []\n\napplications:\n  image:\n    registry: 091468197733.dkr.ecr.us-east-1.amazonaws.com\n    repository: genestack/applications\n    pullPolicy: Always\n    pullSecrets: []\n</code></pre>"},{"location":"home/release-notes/v1.50-v1.59/#application-settings-rework","title":"Application settings rework","text":"<p>From:</p> <pre><code>genestack:\n  applicationSettings:\n    backend:\n      properties:\n        # backend.properties file content\n      propertiesAuth:\n        # backend-credentials.properties file content\n      propertiesLimits:\n        # limits.yaml file content\n      predefinedSystemUsers:\n        # token and password for technical odm users\n      predefinedUsers:\n        # predefined-users.json file content\n    frontend:\n      properties:\n        # frontend.properties file content\n        \"google.openid.ini\":\n          # google.openid.ini file content\n        \"microsoft.openid.ini\":\n          # microsoft.openid.ini file content\n        \"okta.openid.ini\":\n          # okta.openid.ini file content\n      propertiesAuth:\n        # frontend-credentials.properties file content\n      monitoringThresholds:\n        # monitoring-thresholds.yaml file content\n    saml:\n      # saml directory content\n</code></pre> <p>To:</p> <pre><code>core:\n  configurationFiles:\n    \"application.yaml\":\n      # backend.properties and backend-credentials.properties files content in YAML format\n    \"settings.py.local\":\n      # settings.py.local file content\n  secretFiles:\n    # saml directory content\n\napplications:\n  configurationFiles:\n    \"application.yaml\":\n    # frontend.properties and frontend-credentials.properties files content in YAML format\n    \"google.openid.ini\":\n    # google.openid.ini file content\n    \"microsoft.openid.ini\":\n    # microsoft.openid.ini file content\n    \"okta.openid.ini\":\n    # okta.openid.ini file content\n</code></pre>"},{"location":"home/release-notes/v1.50-v1.59/#high-level-paths-renaming-in-valuesyaml","title":"High-level paths renaming in values.yaml","text":""},{"location":"home/release-notes/v1.50-v1.59/#solr","title":"Solr","text":"<p>From:</p> <pre><code>index: {}  # Solr configuration\n</code></pre> <p>To:</p> <pre><code>solr: {}  # Solr configuration\n</code></pre>"},{"location":"home/release-notes/v1.50-v1.59/#clickhouse","title":"Clickhouse","text":"<p>From:</p> <pre><code>txIndex: {}  # Clickhouse configuration\n</code></pre> <p>To:</p> <pre><code>clickhouse: {}  # Clickhouse configuration\n</code></pre>"},{"location":"home/release-notes/v1.50-v1.59/#mysql","title":"Mysql","text":"<p>From:</p> <pre><code>db: {}  # Mysql configuration\n</code></pre> <p>To:</p> <pre><code>mysql: {}  # Mysql configuration\n</code></pre>"},{"location":"home/release-notes/v1.50-v1.59/#nginx","title":"Nginx","text":"<p>From:</p> <pre><code>proxy: {}  # Nginx configuration\n</code></pre> <p>To:</p> <pre><code>nginx: {}  # Nginx configuration\n</code></pre>"},{"location":"home/requirements/external-services/","title":"External Services","text":"<ul> <li>As a storage solution for the source data ODM supports S3 and any Distribute File System that can be represented in Kubernetes as a StorageClass with RWM attribute. e.g. (NFS, EFS)</li> <li>For notifications and secure tokens distribution SMTP service is required.</li> <li>For SSO (Single Sign-On) functionality an Identity Provider is required.</li> </ul>"},{"location":"home/requirements/hardware/","title":"Hardware","text":"<ul> <li>We recommend allocating 16 cores 128GB of memory for production environments.</li> <li>It is necessary to provide multiple disks for databases and internal services. You can use any solution that works with Kubernetes (AWS EBS, Azure Disks, etc.). An important note: for optimal performance, we strongly recommend using SSDs.</li> <li>The operating system can be any distribution of Linux (Ubuntu, CentOS, RedHat, Amazon Linux, etc). Preferably, use the latest versions.</li> <li>The container runtime processor architecture must be x86-64.</li> </ul>"},{"location":"home/requirements/kubernetes/","title":"Kubernetes","text":"<ul> <li>Any distribution of Kubernetes could be used, e.g.: EKS, AKS, Rancher, Vanilla Kubernetes. Of the known limitations, we have not tested with Redhat OpenShift.</li> <li>ODM requires to store a state inside of Kubernetes, this is under StorageClass and the corresponding controller responsability.</li> <li>For publishing ODM we use Ingress, it requires a IngressClass and the corresponding controller.</li> <li>(Recommendation) To work with SSL/TLS, for Ingress, provide certificates via Kubernetes secrets or configure them on an external Load Balancer.</li> </ul>"},{"location":"home/single-sign-on/sso/","title":"About SSO in ODM","text":"<p>For authentication, ODM supports the OpenID and SAML.</p> <p>For user and group synchronization, it supports the SCIM.</p> <p>Important information</p> <ul> <li> <p>ODM can work with only one protocol (OpenID or SAML) at a time.</p> </li> <li> <p>With OpenID, you can use OAuth tokens to connect to the ODM API (documentation for Azure)</p> </li> </ul>"},{"location":"home/single-sign-on/openid/azure/","title":"Azure AD setup","text":"<p>This section explains how to integrate ODM with AzureAD to use AzureAD tenant as OpenID Connect provider, OAuth 2.0 server.</p>"},{"location":"home/single-sign-on/openid/azure/#create-odm-application-configuration-in-azuread","title":"Create ODM application configuration in AzureAD","text":"<ol> <li> <p>Go to Azure Portal App Registration</p> </li> <li> <p>Navigate to Enterprise applications \u2013&gt; All applications</p> </li> <li> <p>Press \"New application\" button, then press \"Create your own application\" button</p> </li> <li> <p>Assign the application name, select \"Non-gallery\" application type, and press \"Create\" button</p> </li> </ol> <p>Warning</p> <p>Do not create the application via Azure Active Directory \u2013&gt; App registrations, because applications created that way do not support SCIM user provisioning.</p>"},{"location":"home/single-sign-on/openid/azure/#configure-openid-connect-client","title":"Configure OpenID Connect client","text":"<ol> <li> <p>Navigate to Azure Active Directory \u2013&gt; App registrations \u2013&gt; {YOUR-APPLICATION}</p> </li> <li> <p>Under \"Overview\" menu item:</p> <ol> <li> <p>Copy the \"Application (client) ID\" value. You will need to save this alue as <code>clientId</code> ODM configuration parameter</p> </li> <li> <p>Press Endpoints button in toolbar, and copy OpenID Connect metadata document URL. It should look like <code>https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration</code>.     You will need to save it as <code>discoveryDocumentUri</code> ODM configuration parameter. Refer to Fetch the OpenID Connect metadata document for details about OpenID Connect discovery.</p> </li> </ol> </li> <li> <p>Under \"Branding and properties\" menu item, configure \"Home page URL\" (e.g. as <code>https://ODM-HOST</code>) and press \"Save\" button</p> </li> <li> <p>Under \"Authentication\" menu item:</p> <ol> <li> <p>Press \"Add a platform\" button under \"Platform configurations\" section</p> <ol> <li> <p>Select \"Web\" application type</p> </li> <li> <p>Specify ODM redirect URI, e.g. <code>https://ODM-HOST/frontend/endpoint/microsoft/back</code></p> </li> <li> <p>Press \"Configure\" button</p> </li> </ol> </li> <li> <p>Disable all tokens for \"Implicit grant and hybrid flows\"</p> </li> <li> <p>Press \"Save\" button</p> </li> </ol> </li> <li> <p>Under \"Certificates and secrets\" menu item:</p> <ol> <li> <p>Press \"New client secret\" button under \"Client secrets\" section, specify the secret description, choose the expiration time, and press \"Add\" button</p> </li> <li> <p>Find the newly added client secret in the table and copy the client secret value (from \"Value\" column). You will need to save this value as <code>clientSecret</code> ODM configuration parameter</p> </li> </ol> </li> <li> <p>Under \"API permissions\" menu item:</p> <ol> <li> <p>Press \"Add a permission\" button under \"Configured permissions\" section</p> <ol> <li> <p>Select \"Microsoft Graph\" application type</p> </li> <li> <p>Select \"Delegated permissions\"</p> </li> <li> <p>On the menu \"OpenId permissions\" select: <code>email</code>, <code>openid</code>, <code>profile</code>, <code>offline_access</code></p> </li> <li> <p>Press \"Add permission\" button</p> </li> </ol> </li> <li> <p>Press \"Grant admin consent for {YOUR ORGANIZATION}\" button under \"Configured permissions\" section</p> </li> </ol> </li> </ol> <p>Attention</p> <p>You may want to review settings under \"Supported account types\" and update them as appropriate for your use case. Do not forget to press the \"Save\" button.</p> <p>Now you can configure ODM to use AzureID as OpenID Connect provider. You can find configuration examples in the Helm chart.</p>"},{"location":"home/single-sign-on/openid/azure/#configure-oauth-resource-server","title":"Configure OAuth resource server","text":"<p>ODM exposes REST APIs which can only be called by other applications. These client applications can use OAuth 2.0 access tokens, issued by Authorization Server, to authorize REST API requests to ODM.</p> <p>To make it work, you need to establish trust relationships between ODM and AzureAD (it will play the Authorization Server role). You can do this by configuring OpenID Connect integration (see Configure OpenID Connect client section above).</p> <p>After that you need to provide AzureAD with necessary information about ODM. Navigate to Azure Active Directory \u2013&gt; App registrations \u2013&gt; {YOUR-APPLICATION} and do the following:</p> <ol> <li> <p>Set up OAuth scopes for ODM:</p> <ol> <li> <p>Open \"Expose an API\" menu item</p> </li> <li> <p>Set \"Application ID URI\" if it is not set already:</p> <ol> <li> <p>Press the \"Set\" hyperlink to the right of \"Application ID URI\" label</p> </li> <li> <p>Leave the default \"Application ID URI\" value which is <code>api://{clientId}</code></p> </li> <li> <p>Press \"Save\" button</p> </li> </ol> </li> <li> <p>Define a single default scope for ODM REST API clients:</p> <ol> <li> <p>Press \"Add a scope\" button under \"Scopes defined by this API\" section</p> </li> <li> <p>Set \"Scope name\" to whatever you like, e.g. <code>default</code></p> </li> <li> <p>Set \"Who can consent?\" to \"Admins and users\"</p> </li> <li> <p>Set \"Admin consent display name\" to \"Access user data in ODM\"</p> </li> <li> <p>Set \"Admin consent description\" to \"Allows the app to read signed-in user's data in ODM\"</p> </li> <li> <p>Set \"User consent display name\" to \"Access your data in ODM\"</p> </li> <li> <p>Set \"User consent description\" to \"Allows the app to read your data in ODM\"</p> </li> <li> <p>Set \"State\" to \"Enabled\"</p> </li> <li> <p>Press \"Add scope\" button</p> </li> </ol> </li> <li> <p>Tell AzureAD which applications should be able to retrieve access tokens from AzureAD to access ODM REST API endpoints:</p> <ol> <li> <p>Press \"Add a client application\" button under \"Authorized client applications\" section</p> </li> <li> <p>Set \"Client ID\" to the <code>clientId</code> value of the application that will retrieve access tokens from AzureAD to access ODM REST APIs. This client application must have its own App registration in AzureAD where it receives its own <code>clientId</code>, different from the <code>clientId</code> value used to configure ODM</p> </li> <li> <p>Select the <code>api://{clientId}/default</code> scope from the list of scopes under \"Authorized scopes\"</p> </li> <li> <p>Press \"Add application\" button</p> </li> </ol> </li> <li> <p>Repeat the previous step for every client application in case you have many of them</p> </li> </ol> </li> <li> <p>Configure AzureAD to issue to ODM clients Access Tokens version 2 (otherwise access tokens will not be compatible with configuration from OpenID Connect discovery document; see Note about access token version section below):</p> <ol> <li> <p>Open \"Manifest\" menu item</p> </li> <li> <p>Find <code>accessTokenAcceptedVersion</code> parameter in the manifest JSON</p> </li> <li> <p>Set the value of <code>accessTokenAcceptedVersion</code> to <code>2</code></p> </li> <li> <p>Press \"Save\" button</p> </li> </ol> </li> </ol> <p>Now AzureAD is configured to issue access tokens with the <code>api://{clientId}/default</code> scope to applications that want to access ODM REST APIs using OAuth 2.0 access tokens.</p>"},{"location":"home/single-sign-on/openid/azure/#note-about-access-token-version","title":"Note about access token version","text":"<p>ODM is configured to use version 2 of OpenID Connect protocol implementation in AzureAD, as defined by the discovery document URL: <code>https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration?appId={clientId}</code></p> <p>However, for access tokens AzureAD uses the version 1 format by default, which is incompatible with configuration from v2 OpenID Connect discovery document: <code>iss</code> claim in v1 access token format has values like <code>https://sts.windows.net/{uuid}/</code> while the expected <code>iss</code> claim format in v2 configuration is <code>https://login.microsoftonline.com/{uuid}/v2.0</code>.</p> <p>Therefore, we need to tell AzureAD explicitly to use v2 format of access tokens, which is currently possible only by changing <code>accessTokenAcceptedVersion</code> parameter in application manifest manually. Refer to manifest reference for details.</p>"},{"location":"home/single-sign-on/openid/azure/#configure-user-and-group-provisioning","title":"Configure user and group provisioning","text":"<p>An article about SCIM can be found here SCIM provisioning</p>"},{"location":"home/single-sign-on/openid/google/","title":"Google Workspace setup","text":"<p>This section explains how to integrate ODM with Google Workspace to use Google as OpenID Connect provider.</p> <p>Official documentation</p>"},{"location":"home/single-sign-on/openid/google/#create-google-oauth-keys","title":"Create Google OAuth keys","text":"<ol> <li> <p>Go to Google Console</p> </li> <li> <p>Click Create Credentials, then click OAuth Client ID in the drop-down menu</p> </li> <li> <p>Enter the following:</p> <ul> <li> <p>Application Type: Web Application</p> </li> <li> <p>Name: Specify a name for your app</p> </li> <li> <p>Authorized JavaScript Origins: <code>https://ODM-HOST</code></p> </li> <li> <p>Authorized Redirect URLs: <code>https://ODM-HOST/frontend/endpoint/google/back</code></p> </li> </ul> </li> <li> <p>Click Create</p> </li> <li> <p>Copy the <code>Client ID</code> and <code>Client Secret</code> from the OAuth Client modal</p> </li> </ol> <p>Now you can configure ODM to use Google as OpenID Connect provider. You can find configuration examples in the Helm chart.</p>"},{"location":"home/single-sign-on/openid/okta/","title":"Okta setup","text":"<p>This section explains how to integrate ODM with Okta to use Okta as OpenID Connect provider.</p> <p>Official documentation</p>"},{"location":"home/single-sign-on/openid/okta/#launch-the-wizard","title":"Launch the Wizard","text":"<ol> <li> <p>In the Admin Console, go to Applications -&gt; Applications.</p> </li> <li> <p>Click Create App Integration.</p> </li> <li> <p>To create an OIDC app integration, select OIDC - OpenID Connect as the Sign-in method.</p> </li> <li> <p>Choose the type of application to integrate with Okta. Select Web Application.</p> </li> <li> <p>Click Next.</p> </li> </ol>"},{"location":"home/single-sign-on/openid/okta/#configure-initial-settings","title":"Configure initial settings","text":"<ol> <li> <p>In General Settings</p> <ul> <li> <p>App integration name: Specify a name for your app integration</p> </li> <li> <p>Grant type: select Authorization Code and Interaction Code</p> </li> <li> <p>Sign-in redirect URIs: <code>https://ODM-HOST/frontend/endpoint/okta/back</code></p> </li> </ul> </li> <li> <p>Next, you can follow the official instructions.</p> </li> </ol>"},{"location":"home/single-sign-on/openid/okta/#configure-oidc-settings","title":"Configure OIDC settings","text":"<ul> <li>Copy the Client ID and the Client Secret from General page.</li> </ul> <p>Now you can configure ODM to use Okta as OpenID Connect provider. You can find configuration examples in the Helm chart.</p>"},{"location":"home/single-sign-on/saml/google/","title":"Google Workspace setup","text":"<p>This section explains how to integrate ODM with Google Workspace to use Google as SAML service provider.</p> <p>Official documentation</p>"},{"location":"home/single-sign-on/saml/google/#create-google-saml-app","title":"Create Google SAML app","text":"<ol> <li> <p>In the GSuite Admin Cosole, go to Apps -&gt; Web and mobile apps</p> </li> <li> <p>Click Add app -&gt; Add custom SAML app</p> <ol> <li> <p>App details</p> <ul> <li>App name: Specify a name for your app</li> </ul> </li> <li> <p>Google Identity Provider details</p> <ul> <li> <p>Copy SSO URL and Entity ID</p> </li> <li> <p>Download the certificate, it will be useful for setting up ODM</p> </li> </ul> </li> <li> <p>Service provider details</p> <ul> <li> <p>ACS URL: <code>https://ODM-HOST/frontend/endpoint/AssertionConsumer</code></p> </li> <li> <p>Entity ID: <code>https://ODM-HOST/frontend/endpoint/SamlSpMetadata</code></p> </li> <li> <p>Start URL: <code>https://ODM-HOST/</code></p> </li> <li> <p>Signed Response: <code>off</code> (see below)</p> </li> <li> <p>Name ID</p> <ul> <li> <p>Name ID format: <code>EMAIL</code></p> </li> <li> <p>Name ID: <code>Basic Information / Primary Email</code></p> </li> </ul> </li> </ul> </li> <li> <p>Attribute mapping</p> <ul> <li> <p>Attributes: Click Add Mapping to define the following attributes</p> <ul> <li> <p><code>Basic Information / Primary Email</code> -&gt; <code>urn:mace:dir:attribute-def:mail</code></p> </li> <li> <p><code>Basic Information / First Name</code> -&gt; <code>urn:mace:dir:attribute-def:givenName</code></p> </li> <li> <p><code>Basic Information / Last Name</code> -&gt; <code>urn:mace:dir:attribute-def:sn</code></p> </li> </ul> </li> </ul> </li> <li> <p>Click Finish</p> </li> <li> <p>You\u2019ll be redirected to \u201cApplication settings\" page.</p> <ul> <li>Click User access and then change Service status to ON for everyone. SAVE the change.</li> </ul> </li> </ol> </li> </ol> <p>Warning</p> <p>As of Mar 4, 2020 Signed Response checkbox behaves weirdly:</p> <ul> <li> <p>when it is <code>off</code>, response itself is unsigned, but assertions are signed</p> </li> <li> <p>when the checkbox is <code>on</code>, response becomes signed, but assertions for some reason are unsigned</p> </li> </ul> <p>We do not support the latter combination, hence in Google Suite SAML Signed Response option should be turned off.</p>"},{"location":"home/single-sign-on/saml/google/#certificate-preparation","title":"Certificate preparation","text":"<p>You need to create the necessary certificates for ODM.</p> <ol> <li> <p>In step 2b, you downloaded the certificate.</p> <ol> <li> <p>Convert it to <code>idp.key</code>.</p> <pre><code>openssl x509 -outform der -in downloaded_certificate.pem -out idp.key\n</code></pre> </li> <li> <p>Convert <code>idp.key</code> to base64 format</p> <pre><code>cat idp.key | base64\n</code></pre> </li> </ol> </li> <li> <p>Create new certificates</p> <ol> <li> <p>Generate <code>sp_x509_pem.crt</code></p> <ul> <li><code>ODM-HOST</code> is the server name without http/https, for example, <code>odm.example.com</code>.</li> </ul> <pre><code>export SAML_SP_HOSTNAME=\"ODM-HOST\"\n\nopenssl req \\\n-x509 \\\n-nodes \\\n-newkey rsa:2048 \\\n-keyout sp_pem.key \\\n-out sp_x509_pem.crt \\\n-subj \"/C=UK/ST=England/L=Cambridge/O=Genestack/OU=Genestack/CN=${SAML_SP_HOSTNAME}\" \\\n-days 3650\n</code></pre> </li> <li> <p>Generate <code>sp_pkcs8_der.key</code></p> <pre><code>openssl pkcs8 \\\n-topk8 \\\n-inform PEM \\\n-outform DER \\\n-in sp_pem.key \\\n-out sp_pkcs8_der.key \\\n-nocrypt\n</code></pre> </li> <li> <p>Convert <code>sp_x509_pem.crt</code> to base64 format</p> <pre><code>cat sp_x509_pem.crt | base64\n</code></pre> </li> <li> <p>Convert <code>sp_pkcs8_der.key</code> to base64 format</p> <pre><code>cat sp_pkcs8_der.key | base64\n</code></pre> </li> <li> <p>Update the Helm chart with the provided information.</p> </li> </ol> </li> </ol> <p>Now you can configure ODM to use Google as SAML service provider. You can find configuration examples in the Helm chart.</p>"},{"location":"home/single-sign-on/saml/okta/","title":"Okta setup","text":"<p>This section explains how to integrate ODM with Okta to use Okta as SAML service provider.</p> <p>Official documentation</p>"},{"location":"home/single-sign-on/saml/okta/#create-okta-saml-app","title":"Create Okta SAML app","text":"<ol> <li> <p>In the Admin Console, go to Applications -&gt; Applications</p> </li> <li> <p>Click Create App Integration</p> </li> <li> <p>Select SAML 2.0 as the Sign-in method</p> <ol> <li> <p>General settings</p> <ul> <li>App name: Specify a name for your app</li> </ul> </li> <li> <p>Configure SAML</p> <ol> <li> <p>General</p> <ul> <li> <p>Single sign-on URL: <code>https://ODM-HOST/frontend/endpoint/AssertionConsumer</code></p> </li> <li> <p>Audience URI (SP Entity ID): <code>https://ODM-HOST/frontend/endpoint/SamlSpMetadata</code></p> </li> <li> <p>Name ID format: <code>EmailAddress</code></p> </li> <li> <p>Application username: <code>Email</code></p> </li> </ul> </li> <li> <p>Attribute Statements (optional)</p> <ul> <li> <p><code>urn:mace:dir:attribute-def:mail</code> -&gt; <code>user.email</code></p> </li> <li> <p><code>urn:mace:dir:attribute-def:givenName</code> -&gt; <code>user.firstName</code></p> </li> <li> <p><code>urn:mace:dir:attribute-def:sn</code> -&gt; <code>user.lastName</code></p> </li> </ul> </li> </ol> </li> <li> <p>Feedback</p> <ul> <li>App type: This is an internal app that we have created</li> </ul> </li> <li> <p>Click Finish</p> </li> <li> <p>You\u2019ll be redirected to Sign On page.</p> <ul> <li>In the SAML Signing Certificates section, generate a new one or download an existing certificate. It will be needed for configuring ODM.</li> </ul> </li> </ol> </li> </ol>"},{"location":"home/single-sign-on/saml/okta/#certificate-preparation","title":"Certificate preparation","text":"<p>You need to create the necessary certificates for ODM.</p> <ol> <li> <p>In step E, you downloaded the certificate.</p> <ol> <li> <p>Convert it to <code>idp.key</code>.</p> <pre><code>openssl x509 -outform der -in okta.cert -out idp.key\n</code></pre> </li> <li> <p>Convert <code>idp.key</code> to base64 format</p> <pre><code>cat idp.key | base64\n</code></pre> </li> </ol> </li> <li> <p>Create new certificates</p> <ol> <li> <p>Generate <code>sp_x509_pem.crt</code></p> <ul> <li><code>ODM-HOST</code> is the server name without http/https, for example, <code>odm.example.com</code>.</li> </ul> <pre><code>export SAML_SP_HOSTNAME=\"ODM-HOST\"\n\nopenssl req \\\n-x509 \\\n-nodes \\\n-newkey rsa:2048 \\\n-keyout sp_pem.key \\\n-out sp_x509_pem.crt \\\n-subj \"/C=UK/ST=England/L=Cambridge/O=Genestack/OU=Genestack/CN=${SAML_SP_HOSTNAME}\" \\\n-days 3650\n</code></pre> </li> <li> <p>Generate <code>sp_pkcs8_der.key</code></p> <pre><code>openssl pkcs8 \\\n-topk8 \\\n-inform PEM \\\n-outform DER \\\n-in sp_pem.key \\\n-out sp_pkcs8_der.key \\\n-nocrypt\n</code></pre> </li> <li> <p>Convert <code>sp_x509_pem.crt</code> to base64 format</p> <pre><code>cat sp_x509_pem.crt | base64\n</code></pre> </li> <li> <p>Convert <code>sp_pkcs8_der.key</code> to base64 format</p> <pre><code>cat sp_pkcs8_der.key | base64\n</code></pre> </li> <li> <p>Update the Helm chart with the provided information.</p> </li> </ol> </li> </ol> <p>Now you can configure ODM to use Okta as SAML service provider. You can find configuration examples in the Helm chart.</p>"},{"location":"home/single-sign-on/scim/azure/","title":"Azure AD setup","text":"<p>This section explains how to enable user and group provisioning from AzureAD into ODM via SCIM protocol.</p> <p>Attention</p> <p>Before proceeding with SCIM configuration, make sure you have set up OpenID.</p>"},{"location":"home/single-sign-on/scim/azure/#configure-user-and-group-provisioning","title":"Configure user and group provisioning","text":"<p>ODM exposes SCIM API endpoints at <code>https://ODM-HOST/frontend/rs/genestack/scim-integration/default-released/scim</code>. AzureAD requires access to these API endpoints in order to provision users and groups into ODM.</p> <p>If your ODM instance is directly accessible from AzureAD servers, you can use the SCIM endpoint above when configuring provisioning in AzureAD. Otherwise, you need to enable access via HTTP protocol from AzureAD servers to the ODM SCIM endpoints, and then use the corresponding external SCIM endpoint URL as configured.</p> <p>Below are configuration steps for AzureAD portal:</p> <ol> <li> <p>Navigate to Enterprise applications \u2013&gt; All applications \u2013&gt; {YOUR-APPLICATION} \u2013&gt; Provisioning</p> </li> <li> <p>Press \"Get started\" button and configure provisioning settings:</p> <ol> <li> <p>Set \"Provisioning Mode\" to \"Automatic\"</p> </li> <li> <p>Set \"Tenant URL\" to the ODM SCIM endpoint URL mentioned above</p> </li> <li> <p>Set \"Secret Token\" to a Genestack API token generated for a dedicated ODM service account</p> </li> <li> <p>Press \"Test Connection\" button</p> </li> <li> <p>If the test is successful, press \"Save\" button; otherwise ensure your configuration is correct, refer to ODM Administration Guide, or contact ODM support for assistance.</p> </li> </ol> </li> <li> <p>Before the first synchronisation we recommend you check the list of groups and users in ODM and add the same users to the same groups in AD.</p> </li> <li> <p>Press \"Start provisioning\" button</p> </li> </ol>"},{"location":"home/troubleshooting/aws-s3/","title":"Problems with S3","text":""},{"location":"home/troubleshooting/aws-s3/#func-file-service","title":"Func-file service","text":"<ul> <li> <p><code>Can't (re-)connect to: https://bucket-name.s3.eu-west-1.amazonaws.com/file-name ... Access Denied</code> - This error indicates that there is an issue with:</p> <ul> <li> <p>Access to S3.</p> </li> <li> <p>Access to the KMS key (if the KMS key is used for encrypting data in the s3 bucket).</p> </li> <li> <p>KMS key is not specified in the ODM configuration <code>func-file</code> (if the KMS key is used for encrypting data in the s3 bucket).</p> </li> </ul> </li> </ul>"},{"location":"home/troubleshooting/azure-scim/","title":"Problems with Azure SCIM provisioning","text":""},{"location":"home/troubleshooting/azure-scim/#azure-application","title":"Azure Application","text":"<ul> <li><code>SystemForCrossDomainIdentityManagementCredentialValidationUnavailable</code> - The server is unavailable for Azure to start synchronization (this process is initiated by Azure). You need to make ODM accessible from the Internet (or through internal networks if you are using Azure) so that Azure SCIM provisioning can connect to it.</li> </ul>"},{"location":"home/troubleshooting/azure-sso/","title":"Problems with Azure SSO","text":""},{"location":"home/troubleshooting/azure-sso/#applications-service","title":"Applications service","text":"<ul> <li><code>Claim \\\"email\\\" is not present in JWT</code> - means that the user has an empty email field (this is a required field).</li> </ul>"},{"location":"home/troubleshooting/sanity-check/","title":"Sanity check using description","text":"<ol> <li> <p>Gather required variables.</p> <pre><code>export ODM_URL=https://odm.localhost\nexport ODM_TOKEN=yourTokenFromRootUser\n</code></pre> </li> <li> <p>Run check over ODM instance before the upgrade.</p> <pre><code>docker run \\\n  --env ODM_URL=${ODM_URL} \\\n  --env ODM_TOKEN=${ODM_TOKEN} \\\n  091468197733.dkr.ecr.us-east-1.amazonaws.com/genestack/clickhouse-helper \\\n  odm sanity &gt; sanity-result-before.jsonl\n</code></pre> </li> <li> <p>Proceed with upgrading ODM instance</p> </li> <li> <p>Run check over ODM instance after the upgrade</p> <pre><code>docker run \\\n  --env ODM_URL=${ODM_URL} \\\n  --env ODM_TOKEN=${ODM_TOKEN} \\\n  091468197733.dkr.ecr.us-east-1.amazonaws.com/genestack/clickhouse-helper \\\n  odm sanity &gt; sanity-result-after.jsonl\n</code></pre> </li> <li> <p>Run a diff:</p> <pre><code>diff sanity-result-before.jsonl sanity-result-after.jsonl\n</code></pre> </li> </ol> <p>Basically there should be no changes, except studies with already uploaded VCF files, they should be started to reimport.</p>"}]}